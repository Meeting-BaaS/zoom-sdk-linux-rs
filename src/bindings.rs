/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 36;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const _UNISTD_H: u32 = 1;
pub const _POSIX_VERSION: u32 = 200809;
pub const __POSIX2_THIS_VERSION: u32 = 200809;
pub const _POSIX2_VERSION: u32 = 200809;
pub const _POSIX2_C_VERSION: u32 = 200809;
pub const _POSIX2_C_BIND: u32 = 200809;
pub const _POSIX2_C_DEV: u32 = 200809;
pub const _POSIX2_SW_DEV: u32 = 200809;
pub const _POSIX2_LOCALEDEF: u32 = 200809;
pub const _XOPEN_VERSION: u32 = 700;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _XOPEN_XPG2: u32 = 1;
pub const _XOPEN_XPG3: u32 = 1;
pub const _XOPEN_XPG4: u32 = 1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: u32 = 1;
pub const _BITS_POSIX_OPT_H: u32 = 1;
pub const _POSIX_JOB_CONTROL: u32 = 1;
pub const _POSIX_SAVED_IDS: u32 = 1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_SYNCHRONIZED_IO: u32 = 200809;
pub const _POSIX_FSYNC: u32 = 200809;
pub const _POSIX_MAPPED_FILES: u32 = 200809;
pub const _POSIX_MEMLOCK: u32 = 200809;
pub const _POSIX_MEMLOCK_RANGE: u32 = 200809;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200809;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 0;
pub const _POSIX_VDISABLE: u8 = 0u8;
pub const _POSIX_NO_TRUNC: u32 = 1;
pub const _XOPEN_REALTIME: u32 = 1;
pub const _XOPEN_REALTIME_THREADS: u32 = 1;
pub const _XOPEN_SHM: u32 = 1;
pub const _POSIX_THREADS: u32 = 200809;
pub const _POSIX_REENTRANT_FUNCTIONS: u32 = 1;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200809;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200809;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200809;
pub const _POSIX_THREAD_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_PRIO_PROTECT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_INHERIT: u32 = 200809;
pub const _POSIX_THREAD_ROBUST_PRIO_PROTECT: i32 = -1;
pub const _POSIX_SEMAPHORES: u32 = 200809;
pub const _POSIX_REALTIME_SIGNALS: u32 = 200809;
pub const _POSIX_ASYNCHRONOUS_IO: u32 = 200809;
pub const _POSIX_ASYNC_IO: u32 = 1;
pub const _LFS_ASYNCHRONOUS_IO: u32 = 1;
pub const _POSIX_PRIORITIZED_IO: u32 = 200809;
pub const _LFS64_ASYNCHRONOUS_IO: u32 = 1;
pub const _LFS_LARGEFILE: u32 = 1;
pub const _LFS64_LARGEFILE: u32 = 1;
pub const _LFS64_STDIO: u32 = 1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: u32 = 200809;
pub const _POSIX_CPUTIME: u32 = 0;
pub const _POSIX_THREAD_CPUTIME: u32 = 0;
pub const _POSIX_REGEXP: u32 = 1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200809;
pub const _POSIX_SHELL: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 200809;
pub const _POSIX_SPIN_LOCKS: u32 = 200809;
pub const _POSIX_SPAWN: u32 = 200809;
pub const _POSIX_TIMERS: u32 = 200809;
pub const _POSIX_BARRIERS: u32 = 200809;
pub const _POSIX_MESSAGE_PASSING: u32 = 200809;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200809;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 0;
pub const _POSIX_CLOCK_SELECTION: u32 = 200809;
pub const _POSIX_ADVISORY_INFO: u32 = 200809;
pub const _POSIX_IPV6: u32 = 200809;
pub const _POSIX_RAW_SOCKETS: u32 = 200809;
pub const _POSIX2_CHAR_TERM: u32 = 200809;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_V7_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V6_LPBIG_OFFBIG: i32 = -1;
pub const _XBS5_LPBIG_OFFBIG: i32 = -1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const __ILP32_OFF32_CFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFF32_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __ILP32_OFFBIG_CFLAGS: &[u8; 48] = b"-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64\0";
pub const __ILP32_OFFBIG_LDFLAGS: &[u8; 5] = b"-m32\0";
pub const __LP64_OFF64_CFLAGS: &[u8; 5] = b"-m64\0";
pub const __LP64_OFF64_LDFLAGS: &[u8; 5] = b"-m64\0";
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const R_OK: u32 = 4;
pub const W_OK: u32 = 2;
pub const X_OK: u32 = 1;
pub const F_OK: u32 = 0;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_DATA: u32 = 3;
pub const SEEK_HOLE: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const _GETOPT_POSIX_H: u32 = 1;
pub const _GETOPT_CORE_H: u32 = 1;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const CLOSE_RANGE_UNSHARE: u32 = 2;
pub const CLOSE_RANGE_CLOEXEC: u32 = 4;
pub const _GLIBCXX_CXX_CONFIG_H: u32 = 1;
pub const _GLIBCXX_RELEASE: u32 = 12;
pub const __GLIBCXX__: u32 = 20220819;
pub const _GLIBCXX_HAVE_ATTRIBUTE_VISIBILITY: u32 = 1;
pub const _GLIBCXX_USE_DEPRECATED: u32 = 1;
pub const _GLIBCXX_EXTERN_TEMPLATE: u32 = 1;
pub const _GLIBCXX_USE_DUAL_ABI: u32 = 1;
pub const _GLIBCXX_USE_CXX11_ABI: u32 = 1;
pub const _GLIBCXX_INLINE_VERSION: u32 = 0;
pub const _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED: u32 = 1;
pub const _GLIBCXX_VERBOSE_ASSERT: u32 = 1;
pub const _GLIBCXX_USE_ALLOCATOR_NEW: u32 = 1;
pub const _GLIBCXX_OS_DEFINES: u32 = 1;
pub const __NO_CTYPE: u32 = 1;
pub const _GLIBCXX_GTHREAD_USE_WEAK: u32 = 0;
pub const _GLIBCXX_CPU_DEFINES: u32 = 1;
pub const _GLIBCXX_USE_STD_SPEC_FUNCS: u32 = 1;
pub const _GLIBCXX_FAST_MATH: u32 = 0;
pub const _GLIBCXX_USE_FLOAT128: u32 = 1;
pub const _GLIBCXX_FLOAT_IS_IEEE_BINARY32: u32 = 1;
pub const _GLIBCXX_DOUBLE_IS_IEEE_BINARY64: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_HAS_UNIQ_OBJ_REP: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_AGGREGATE: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_IS_SAME: u32 = 1;
pub const _GLIBCXX_HAVE_BUILTIN_LAUNDER: u32 = 1;
pub const _PSTL_VERSION: u32 = 12000;
pub const _PSTL_VERSION_MAJOR: u32 = 12;
pub const _PSTL_VERSION_MINOR: u32 = 0;
pub const _PSTL_VERSION_PATCH: u32 = 0;
pub const _PSTL_USAGE_WARNINGS: u32 = 0;
pub const _PSTL_UDR_PRESENT: u32 = 0;
pub const _PSTL_PRAGMA_LOCATION: &[u8; 26] = b" [Parallel STL message]: \0";
pub const _GLIBCXX_HAVE_ACOSF: u32 = 1;
pub const _GLIBCXX_HAVE_ACOSL: u32 = 1;
pub const _GLIBCXX_HAVE_ALIGNED_ALLOC: u32 = 1;
pub const _GLIBCXX_HAVE_ARC4RANDOM: u32 = 1;
pub const _GLIBCXX_HAVE_ARPA_INET_H: u32 = 1;
pub const _GLIBCXX_HAVE_ASINF: u32 = 1;
pub const _GLIBCXX_HAVE_ASINL: u32 = 1;
pub const _GLIBCXX_HAVE_AS_SYMVER_DIRECTIVE: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2F: u32 = 1;
pub const _GLIBCXX_HAVE_ATAN2L: u32 = 1;
pub const _GLIBCXX_HAVE_ATANF: u32 = 1;
pub const _GLIBCXX_HAVE_ATANL: u32 = 1;
pub const _GLIBCXX_HAVE_ATOMIC_LOCK_POLICY: u32 = 1;
pub const _GLIBCXX_HAVE_AT_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_CEILF: u32 = 1;
pub const _GLIBCXX_HAVE_CEILL: u32 = 1;
pub const _GLIBCXX_HAVE_COMPLEX_H: u32 = 1;
pub const _GLIBCXX_HAVE_COSF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHF: u32 = 1;
pub const _GLIBCXX_HAVE_COSHL: u32 = 1;
pub const _GLIBCXX_HAVE_COSL: u32 = 1;
pub const _GLIBCXX_HAVE_DECL_STRNLEN: u32 = 1;
pub const _GLIBCXX_HAVE_DIRENT_H: u32 = 1;
pub const _GLIBCXX_HAVE_DIRFD: u32 = 1;
pub const _GLIBCXX_HAVE_DLFCN_H: u32 = 1;
pub const _GLIBCXX_HAVE_ENDIAN_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXCEPTION_PTR_SINCE_GCC46: u32 = 1;
pub const _GLIBCXX_HAVE_EXECINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_EXPF: u32 = 1;
pub const _GLIBCXX_HAVE_EXPL: u32 = 1;
pub const _GLIBCXX_HAVE_FABSF: u32 = 1;
pub const _GLIBCXX_HAVE_FABSL: u32 = 1;
pub const _GLIBCXX_HAVE_FCNTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_FDOPENDIR: u32 = 1;
pub const _GLIBCXX_HAVE_FENV_H: u32 = 1;
pub const _GLIBCXX_HAVE_FINITE: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEF: u32 = 1;
pub const _GLIBCXX_HAVE_FINITEL: u32 = 1;
pub const _GLIBCXX_HAVE_FLOAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORF: u32 = 1;
pub const _GLIBCXX_HAVE_FLOORL: u32 = 1;
pub const _GLIBCXX_HAVE_FMODF: u32 = 1;
pub const _GLIBCXX_HAVE_FMODL: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPF: u32 = 1;
pub const _GLIBCXX_HAVE_FREXPL: u32 = 1;
pub const _GLIBCXX_HAVE_GETENTROPY: u32 = 1;
pub const _GLIBCXX_HAVE_GETIPINFO: u32 = 1;
pub const _GLIBCXX_HAVE_GETS: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOT: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTF: u32 = 1;
pub const _GLIBCXX_HAVE_HYPOTL: u32 = 1;
pub const _GLIBCXX_HAVE_ICONV: u32 = 1;
pub const _GLIBCXX_HAVE_INTTYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFF: u32 = 1;
pub const _GLIBCXX_HAVE_ISINFL: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANF: u32 = 1;
pub const _GLIBCXX_HAVE_ISNANL: u32 = 1;
pub const _GLIBCXX_HAVE_ISWBLANK: u32 = 1;
pub const _GLIBCXX_HAVE_LC_MESSAGES: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPF: u32 = 1;
pub const _GLIBCXX_HAVE_LDEXPL: u32 = 1;
pub const _GLIBCXX_HAVE_LIBINTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_AS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_DATA: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_FSIZE: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_RSS: u32 = 1;
pub const _GLIBCXX_HAVE_LIMIT_VMEM: u32 = 0;
pub const _GLIBCXX_HAVE_LINK: u32 = 1;
pub const _GLIBCXX_HAVE_LINK_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_FUTEX: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_RANDOM_H: u32 = 1;
pub const _GLIBCXX_HAVE_LINUX_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOCALE_H: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10F: u32 = 1;
pub const _GLIBCXX_HAVE_LOG10L: u32 = 1;
pub const _GLIBCXX_HAVE_LOGF: u32 = 1;
pub const _GLIBCXX_HAVE_LOGL: u32 = 1;
pub const _GLIBCXX_HAVE_MBSTATE_T: u32 = 1;
pub const _GLIBCXX_HAVE_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_MEMORY_H: u32 = 1;
pub const _GLIBCXX_HAVE_MODF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFF: u32 = 1;
pub const _GLIBCXX_HAVE_MODFL: u32 = 1;
pub const _GLIBCXX_HAVE_NETDB_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_IN_H: u32 = 1;
pub const _GLIBCXX_HAVE_NETINET_TCP_H: u32 = 1;
pub const _GLIBCXX_HAVE_OPENAT: u32 = 1;
pub const _GLIBCXX_HAVE_POLL: u32 = 1;
pub const _GLIBCXX_HAVE_POLL_H: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_MEMALIGN: u32 = 1;
pub const _GLIBCXX_HAVE_POSIX_SEMAPHORE: u32 = 1;
pub const _GLIBCXX_HAVE_POWF: u32 = 1;
pub const _GLIBCXX_HAVE_POWL: u32 = 1;
pub const _GLIBCXX_HAVE_QUICK_EXIT: u32 = 1;
pub const _GLIBCXX_HAVE_READLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SECURE_GETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SETENV: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOS: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSF: u32 = 1;
pub const _GLIBCXX_HAVE_SINCOSL: u32 = 1;
pub const _GLIBCXX_HAVE_SINF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHF: u32 = 1;
pub const _GLIBCXX_HAVE_SINHL: u32 = 1;
pub const _GLIBCXX_HAVE_SINL: u32 = 1;
pub const _GLIBCXX_HAVE_SOCKATMARK: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTF: u32 = 1;
pub const _GLIBCXX_HAVE_SQRTL: u32 = 1;
pub const _GLIBCXX_HAVE_STDALIGN_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDBOOL_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDINT_H: u32 = 1;
pub const _GLIBCXX_HAVE_STDLIB_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_L: u32 = 1;
pub const _GLIBCXX_HAVE_STRERROR_R: u32 = 1;
pub const _GLIBCXX_HAVE_STRINGS_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRING_H: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOF: u32 = 1;
pub const _GLIBCXX_HAVE_STRTOLD: u32 = 1;
pub const _GLIBCXX_HAVE_STRUCT_DIRENT_D_TYPE: u32 = 1;
pub const _GLIBCXX_HAVE_STRXFRM_L: u32 = 1;
pub const _GLIBCXX_HAVE_SYMLINK: u32 = 1;
pub const _GLIBCXX_HAVE_SYMVER_SYMBOL_RENAMING_RUNTIME_SUPPORT: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IOCTL_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_IPC_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_PARAM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_RESOURCE_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SDT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SEM_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SOCKET_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STATVFS_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_STAT_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_SYSINFO_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_TYPES_H: u32 = 1;
pub const _GLIBCXX_HAVE_SYS_UIO_H: u32 = 1;
pub const _GLIBCXX_HAVE_S_ISREG: u32 = 1;
pub const _GLIBCXX_HAVE_TANF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHF: u32 = 1;
pub const _GLIBCXX_HAVE_TANHL: u32 = 1;
pub const _GLIBCXX_HAVE_TANL: u32 = 1;
pub const _GLIBCXX_HAVE_TGMATH_H: u32 = 1;
pub const _GLIBCXX_HAVE_TIMESPEC_GET: u32 = 1;
pub const _GLIBCXX_HAVE_TLS: u32 = 1;
pub const _GLIBCXX_HAVE_TRUNCATE: u32 = 1;
pub const _GLIBCXX_HAVE_UCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNISTD_H: u32 = 1;
pub const _GLIBCXX_HAVE_UNLINKAT: u32 = 1;
pub const _GLIBCXX_HAVE_USELOCALE: u32 = 1;
pub const _GLIBCXX_HAVE_UTIME_H: u32 = 1;
pub const _GLIBCXX_HAVE_VFWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VSWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_VWSCANF: u32 = 1;
pub const _GLIBCXX_HAVE_WCHAR_H: u32 = 1;
pub const _GLIBCXX_HAVE_WCSTOF: u32 = 1;
pub const _GLIBCXX_HAVE_WCTYPE_H: u32 = 1;
pub const _GLIBCXX_HAVE_WRITEV: u32 = 1;
pub const _GLIBCXX_HAVE___CXA_THREAD_ATEXIT_IMPL: u32 = 1;
pub const _GLIBCXX_LT_OBJDIR: &[u8; 7] = b".libs/\0";
pub const _GLIBCXX_PACKAGE_BUGREPORT: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE_NAME: &[u8; 15] = b"package-unused\0";
pub const _GLIBCXX_PACKAGE_STRING: &[u8; 30] = b"package-unused version-unused\0";
pub const _GLIBCXX_PACKAGE_TARNAME: &[u8; 10] = b"libstdc++\0";
pub const _GLIBCXX_PACKAGE_URL: &[u8; 1] = b"\0";
pub const _GLIBCXX_PACKAGE__GLIBCXX_VERSION: &[u8; 15] = b"version-unused\0";
pub const _GLIBCXX_STDC_HEADERS: u32 = 1;
pub const _GLIBCXX_DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _GLIBCXX11_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX11_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX11_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX11_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX98_USE_C99_COMPLEX: u32 = 1;
pub const _GLIBCXX98_USE_C99_MATH: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDIO: u32 = 1;
pub const _GLIBCXX98_USE_C99_STDLIB: u32 = 1;
pub const _GLIBCXX98_USE_C99_WCHAR: u32 = 1;
pub const _GLIBCXX_ATOMIC_BUILTINS: u32 = 1;
pub const _GLIBCXX_FULLY_DYNAMIC_STRING: u32 = 0;
pub const _GLIBCXX_HAS_GTHREADS: u32 = 1;
pub const _GLIBCXX_HOSTED: u32 = 1;
pub const _GLIBCXX_RES_LIMITS: u32 = 1;
pub const _GLIBCXX_STDIO_EOF: i32 = -1;
pub const _GLIBCXX_STDIO_SEEK_CUR: u32 = 1;
pub const _GLIBCXX_STDIO_SEEK_END: u32 = 2;
pub const _GLIBCXX_SYMVER: u32 = 1;
pub const _GLIBCXX_SYMVER_GNU: u32 = 1;
pub const _GLIBCXX_USE_C11_UCHAR_CXX11: u32 = 1;
pub const _GLIBCXX_USE_C99: u32 = 1;
pub const _GLIBCXX_USE_C99_COMPLEX_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_CTYPE_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_FENV_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_INTTYPES_WCHAR_T_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_MATH_TR1: u32 = 1;
pub const _GLIBCXX_USE_C99_STDINT_TR1: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_MONOTONIC: u32 = 1;
pub const _GLIBCXX_USE_CLOCK_REALTIME: u32 = 1;
pub const _GLIBCXX_USE_DECIMAL_FLOAT: u32 = 1;
pub const _GLIBCXX_USE_DEV_RANDOM: u32 = 1;
pub const _GLIBCXX_USE_FCHMOD: u32 = 1;
pub const _GLIBCXX_USE_FCHMODAT: u32 = 1;
pub const _GLIBCXX_USE_GETTIMEOFDAY: u32 = 1;
pub const _GLIBCXX_USE_GET_NPROCS: u32 = 1;
pub const _GLIBCXX_USE_LFS: u32 = 1;
pub const _GLIBCXX_USE_LONG_LONG: u32 = 1;
pub const _GLIBCXX_USE_LSTAT: u32 = 1;
pub const _GLIBCXX_USE_NANOSLEEP: u32 = 1;
pub const _GLIBCXX_USE_NLS: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_COND_CLOCKWAIT: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_MUTEX_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_CLOCKLOCK: u32 = 1;
pub const _GLIBCXX_USE_PTHREAD_RWLOCK_T: u32 = 1;
pub const _GLIBCXX_USE_RANDOM_TR1: u32 = 1;
pub const _GLIBCXX_USE_REALPATH: u32 = 1;
pub const _GLIBCXX_USE_SCHED_YIELD: u32 = 1;
pub const _GLIBCXX_USE_SC_NPROCESSORS_ONLN: u32 = 1;
pub const _GLIBCXX_USE_SENDFILE: u32 = 1;
pub const _GLIBCXX_USE_ST_MTIM: u32 = 1;
pub const _GLIBCXX_USE_TMPNAM: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_CXX20: u32 = 1;
pub const _GLIBCXX_USE_UCHAR_C8RTOMB_MBRTOC8_FCHAR8_T: u32 = 1;
pub const _GLIBCXX_USE_UTIME: u32 = 1;
pub const _GLIBCXX_USE_UTIMENSAT: u32 = 1;
pub const _GLIBCXX_USE_WCHAR_T: u32 = 1;
pub const _GLIBCXX_VERBOSE: u32 = 1;
pub const _GLIBCXX_X86_RDRAND: u32 = 1;
pub const _GLIBCXX_X86_RDSEED: u32 = 1;
pub const _GTHREAD_USE_MUTEX_TIMEDLOCK: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _GLIBCXX_CSTRING: u32 = 1;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const _BITS_TIMEX_H: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const ADJ_OFFSET: u32 = 1;
pub const ADJ_FREQUENCY: u32 = 2;
pub const ADJ_MAXERROR: u32 = 4;
pub const ADJ_ESTERROR: u32 = 8;
pub const ADJ_STATUS: u32 = 16;
pub const ADJ_TIMECONST: u32 = 32;
pub const ADJ_TAI: u32 = 128;
pub const ADJ_SETOFFSET: u32 = 256;
pub const ADJ_MICRO: u32 = 4096;
pub const ADJ_NANO: u32 = 8192;
pub const ADJ_TICK: u32 = 16384;
pub const ADJ_OFFSET_SINGLESHOT: u32 = 32769;
pub const ADJ_OFFSET_SS_READ: u32 = 40961;
pub const MOD_OFFSET: u32 = 1;
pub const MOD_FREQUENCY: u32 = 2;
pub const MOD_MAXERROR: u32 = 4;
pub const MOD_ESTERROR: u32 = 8;
pub const MOD_STATUS: u32 = 16;
pub const MOD_TIMECONST: u32 = 32;
pub const MOD_CLKB: u32 = 16384;
pub const MOD_CLKA: u32 = 32769;
pub const MOD_TAI: u32 = 128;
pub const MOD_MICRO: u32 = 4096;
pub const MOD_NANO: u32 = 8192;
pub const STA_PLL: u32 = 1;
pub const STA_PPSFREQ: u32 = 2;
pub const STA_PPSTIME: u32 = 4;
pub const STA_FLL: u32 = 8;
pub const STA_INS: u32 = 16;
pub const STA_DEL: u32 = 32;
pub const STA_UNSYNC: u32 = 64;
pub const STA_FREQHOLD: u32 = 128;
pub const STA_PPSSIGNAL: u32 = 256;
pub const STA_PPSJITTER: u32 = 512;
pub const STA_PPSWANDER: u32 = 1024;
pub const STA_PPSERROR: u32 = 2048;
pub const STA_CLOCKERR: u32 = 4096;
pub const STA_NANO: u32 = 8192;
pub const STA_MODE: u32 = 16384;
pub const STA_CLK: u32 = 32768;
pub const STA_RONLY: u32 = 65280;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const _GLIBCXX_CTIME: u32 = 1;
pub const FontSize_Small: u32 = 8;
pub const FontSize_Medium: u32 = 10;
pub const FontSize_Large: u32 = 12;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type gid_t = __gid_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type off64_t = __off64_t;
pub type useconds_t = __useconds_t;
pub type pid_t = __pid_t;
pub type socklen_t = __socklen_t;
extern "C" {
    pub fn access(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn euidaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eaccess(
        __name: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execveat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn faccessat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __type: ::std::os::raw::c_int,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lseek(
        __fd: ::std::os::raw::c_int,
        __offset: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off_t;
}
extern "C" {
    pub fn lseek64(
        __fd: ::std::os::raw::c_int,
        __offset: __off64_t,
        __whence: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn close(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(__lowfd: ::std::os::raw::c_int);
}
extern "C" {
    pub fn read(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
    ) -> isize;
}
extern "C" {
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> isize;
}
extern "C" {
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pread64(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbytes: usize,
        __offset: __off64_t,
    ) -> isize;
}
extern "C" {
    pub fn pwrite64(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __offset: __off64_t,
    ) -> isize;
}
extern "C" {
    pub fn pipe(__pipedes: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pipe2(
        __pipedes: *mut ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn alarm(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sleep(__seconds: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t) -> __useconds_t;
}
extern "C" {
    pub fn usleep(__useconds: __useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchown(
        __fd: ::std::os::raw::c_int,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lchown(
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchownat(
        __fd: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __owner: __uid_t,
        __group: __gid_t,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fchdir(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getcwd(__buf: *mut ::std::os::raw::c_char, __size: usize)
        -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn get_current_dir_name() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getwd(__buf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn dup(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup2(__fd: ::std::os::raw::c_int, __fd2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dup3(
        __fd: ::std::os::raw::c_int,
        __fd2: ::std::os::raw::c_int,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut environ: *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn execve(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fexecve(
        __fd: ::std::os::raw::c_int,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn execvpe(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *mut ::std::os::raw::c_char,
        __envp: *const *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nice(__inc: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _exit(__status: ::std::os::raw::c_int) -> !;
}
pub const _PC_LINK_MAX: _bindgen_ty_1 = 0;
pub const _PC_MAX_CANON: _bindgen_ty_1 = 1;
pub const _PC_MAX_INPUT: _bindgen_ty_1 = 2;
pub const _PC_NAME_MAX: _bindgen_ty_1 = 3;
pub const _PC_PATH_MAX: _bindgen_ty_1 = 4;
pub const _PC_PIPE_BUF: _bindgen_ty_1 = 5;
pub const _PC_CHOWN_RESTRICTED: _bindgen_ty_1 = 6;
pub const _PC_NO_TRUNC: _bindgen_ty_1 = 7;
pub const _PC_VDISABLE: _bindgen_ty_1 = 8;
pub const _PC_SYNC_IO: _bindgen_ty_1 = 9;
pub const _PC_ASYNC_IO: _bindgen_ty_1 = 10;
pub const _PC_PRIO_IO: _bindgen_ty_1 = 11;
pub const _PC_SOCK_MAXBUF: _bindgen_ty_1 = 12;
pub const _PC_FILESIZEBITS: _bindgen_ty_1 = 13;
pub const _PC_REC_INCR_XFER_SIZE: _bindgen_ty_1 = 14;
pub const _PC_REC_MAX_XFER_SIZE: _bindgen_ty_1 = 15;
pub const _PC_REC_MIN_XFER_SIZE: _bindgen_ty_1 = 16;
pub const _PC_REC_XFER_ALIGN: _bindgen_ty_1 = 17;
pub const _PC_ALLOC_SIZE_MIN: _bindgen_ty_1 = 18;
pub const _PC_SYMLINK_MAX: _bindgen_ty_1 = 19;
pub const _PC_2_SYMLINKS: _bindgen_ty_1 = 20;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const _SC_ARG_MAX: _bindgen_ty_2 = 0;
pub const _SC_CHILD_MAX: _bindgen_ty_2 = 1;
pub const _SC_CLK_TCK: _bindgen_ty_2 = 2;
pub const _SC_NGROUPS_MAX: _bindgen_ty_2 = 3;
pub const _SC_OPEN_MAX: _bindgen_ty_2 = 4;
pub const _SC_STREAM_MAX: _bindgen_ty_2 = 5;
pub const _SC_TZNAME_MAX: _bindgen_ty_2 = 6;
pub const _SC_JOB_CONTROL: _bindgen_ty_2 = 7;
pub const _SC_SAVED_IDS: _bindgen_ty_2 = 8;
pub const _SC_REALTIME_SIGNALS: _bindgen_ty_2 = 9;
pub const _SC_PRIORITY_SCHEDULING: _bindgen_ty_2 = 10;
pub const _SC_TIMERS: _bindgen_ty_2 = 11;
pub const _SC_ASYNCHRONOUS_IO: _bindgen_ty_2 = 12;
pub const _SC_PRIORITIZED_IO: _bindgen_ty_2 = 13;
pub const _SC_SYNCHRONIZED_IO: _bindgen_ty_2 = 14;
pub const _SC_FSYNC: _bindgen_ty_2 = 15;
pub const _SC_MAPPED_FILES: _bindgen_ty_2 = 16;
pub const _SC_MEMLOCK: _bindgen_ty_2 = 17;
pub const _SC_MEMLOCK_RANGE: _bindgen_ty_2 = 18;
pub const _SC_MEMORY_PROTECTION: _bindgen_ty_2 = 19;
pub const _SC_MESSAGE_PASSING: _bindgen_ty_2 = 20;
pub const _SC_SEMAPHORES: _bindgen_ty_2 = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: _bindgen_ty_2 = 22;
pub const _SC_AIO_LISTIO_MAX: _bindgen_ty_2 = 23;
pub const _SC_AIO_MAX: _bindgen_ty_2 = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: _bindgen_ty_2 = 25;
pub const _SC_DELAYTIMER_MAX: _bindgen_ty_2 = 26;
pub const _SC_MQ_OPEN_MAX: _bindgen_ty_2 = 27;
pub const _SC_MQ_PRIO_MAX: _bindgen_ty_2 = 28;
pub const _SC_VERSION: _bindgen_ty_2 = 29;
pub const _SC_PAGESIZE: _bindgen_ty_2 = 30;
pub const _SC_RTSIG_MAX: _bindgen_ty_2 = 31;
pub const _SC_SEM_NSEMS_MAX: _bindgen_ty_2 = 32;
pub const _SC_SEM_VALUE_MAX: _bindgen_ty_2 = 33;
pub const _SC_SIGQUEUE_MAX: _bindgen_ty_2 = 34;
pub const _SC_TIMER_MAX: _bindgen_ty_2 = 35;
pub const _SC_BC_BASE_MAX: _bindgen_ty_2 = 36;
pub const _SC_BC_DIM_MAX: _bindgen_ty_2 = 37;
pub const _SC_BC_SCALE_MAX: _bindgen_ty_2 = 38;
pub const _SC_BC_STRING_MAX: _bindgen_ty_2 = 39;
pub const _SC_COLL_WEIGHTS_MAX: _bindgen_ty_2 = 40;
pub const _SC_EQUIV_CLASS_MAX: _bindgen_ty_2 = 41;
pub const _SC_EXPR_NEST_MAX: _bindgen_ty_2 = 42;
pub const _SC_LINE_MAX: _bindgen_ty_2 = 43;
pub const _SC_RE_DUP_MAX: _bindgen_ty_2 = 44;
pub const _SC_CHARCLASS_NAME_MAX: _bindgen_ty_2 = 45;
pub const _SC_2_VERSION: _bindgen_ty_2 = 46;
pub const _SC_2_C_BIND: _bindgen_ty_2 = 47;
pub const _SC_2_C_DEV: _bindgen_ty_2 = 48;
pub const _SC_2_FORT_DEV: _bindgen_ty_2 = 49;
pub const _SC_2_FORT_RUN: _bindgen_ty_2 = 50;
pub const _SC_2_SW_DEV: _bindgen_ty_2 = 51;
pub const _SC_2_LOCALEDEF: _bindgen_ty_2 = 52;
pub const _SC_PII: _bindgen_ty_2 = 53;
pub const _SC_PII_XTI: _bindgen_ty_2 = 54;
pub const _SC_PII_SOCKET: _bindgen_ty_2 = 55;
pub const _SC_PII_INTERNET: _bindgen_ty_2 = 56;
pub const _SC_PII_OSI: _bindgen_ty_2 = 57;
pub const _SC_POLL: _bindgen_ty_2 = 58;
pub const _SC_SELECT: _bindgen_ty_2 = 59;
pub const _SC_UIO_MAXIOV: _bindgen_ty_2 = 60;
pub const _SC_IOV_MAX: _bindgen_ty_2 = 60;
pub const _SC_PII_INTERNET_STREAM: _bindgen_ty_2 = 61;
pub const _SC_PII_INTERNET_DGRAM: _bindgen_ty_2 = 62;
pub const _SC_PII_OSI_COTS: _bindgen_ty_2 = 63;
pub const _SC_PII_OSI_CLTS: _bindgen_ty_2 = 64;
pub const _SC_PII_OSI_M: _bindgen_ty_2 = 65;
pub const _SC_T_IOV_MAX: _bindgen_ty_2 = 66;
pub const _SC_THREADS: _bindgen_ty_2 = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: _bindgen_ty_2 = 68;
pub const _SC_GETGR_R_SIZE_MAX: _bindgen_ty_2 = 69;
pub const _SC_GETPW_R_SIZE_MAX: _bindgen_ty_2 = 70;
pub const _SC_LOGIN_NAME_MAX: _bindgen_ty_2 = 71;
pub const _SC_TTY_NAME_MAX: _bindgen_ty_2 = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: _bindgen_ty_2 = 73;
pub const _SC_THREAD_KEYS_MAX: _bindgen_ty_2 = 74;
pub const _SC_THREAD_STACK_MIN: _bindgen_ty_2 = 75;
pub const _SC_THREAD_THREADS_MAX: _bindgen_ty_2 = 76;
pub const _SC_THREAD_ATTR_STACKADDR: _bindgen_ty_2 = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: _bindgen_ty_2 = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: _bindgen_ty_2 = 79;
pub const _SC_THREAD_PRIO_INHERIT: _bindgen_ty_2 = 80;
pub const _SC_THREAD_PRIO_PROTECT: _bindgen_ty_2 = 81;
pub const _SC_THREAD_PROCESS_SHARED: _bindgen_ty_2 = 82;
pub const _SC_NPROCESSORS_CONF: _bindgen_ty_2 = 83;
pub const _SC_NPROCESSORS_ONLN: _bindgen_ty_2 = 84;
pub const _SC_PHYS_PAGES: _bindgen_ty_2 = 85;
pub const _SC_AVPHYS_PAGES: _bindgen_ty_2 = 86;
pub const _SC_ATEXIT_MAX: _bindgen_ty_2 = 87;
pub const _SC_PASS_MAX: _bindgen_ty_2 = 88;
pub const _SC_XOPEN_VERSION: _bindgen_ty_2 = 89;
pub const _SC_XOPEN_XCU_VERSION: _bindgen_ty_2 = 90;
pub const _SC_XOPEN_UNIX: _bindgen_ty_2 = 91;
pub const _SC_XOPEN_CRYPT: _bindgen_ty_2 = 92;
pub const _SC_XOPEN_ENH_I18N: _bindgen_ty_2 = 93;
pub const _SC_XOPEN_SHM: _bindgen_ty_2 = 94;
pub const _SC_2_CHAR_TERM: _bindgen_ty_2 = 95;
pub const _SC_2_C_VERSION: _bindgen_ty_2 = 96;
pub const _SC_2_UPE: _bindgen_ty_2 = 97;
pub const _SC_XOPEN_XPG2: _bindgen_ty_2 = 98;
pub const _SC_XOPEN_XPG3: _bindgen_ty_2 = 99;
pub const _SC_XOPEN_XPG4: _bindgen_ty_2 = 100;
pub const _SC_CHAR_BIT: _bindgen_ty_2 = 101;
pub const _SC_CHAR_MAX: _bindgen_ty_2 = 102;
pub const _SC_CHAR_MIN: _bindgen_ty_2 = 103;
pub const _SC_INT_MAX: _bindgen_ty_2 = 104;
pub const _SC_INT_MIN: _bindgen_ty_2 = 105;
pub const _SC_LONG_BIT: _bindgen_ty_2 = 106;
pub const _SC_WORD_BIT: _bindgen_ty_2 = 107;
pub const _SC_MB_LEN_MAX: _bindgen_ty_2 = 108;
pub const _SC_NZERO: _bindgen_ty_2 = 109;
pub const _SC_SSIZE_MAX: _bindgen_ty_2 = 110;
pub const _SC_SCHAR_MAX: _bindgen_ty_2 = 111;
pub const _SC_SCHAR_MIN: _bindgen_ty_2 = 112;
pub const _SC_SHRT_MAX: _bindgen_ty_2 = 113;
pub const _SC_SHRT_MIN: _bindgen_ty_2 = 114;
pub const _SC_UCHAR_MAX: _bindgen_ty_2 = 115;
pub const _SC_UINT_MAX: _bindgen_ty_2 = 116;
pub const _SC_ULONG_MAX: _bindgen_ty_2 = 117;
pub const _SC_USHRT_MAX: _bindgen_ty_2 = 118;
pub const _SC_NL_ARGMAX: _bindgen_ty_2 = 119;
pub const _SC_NL_LANGMAX: _bindgen_ty_2 = 120;
pub const _SC_NL_MSGMAX: _bindgen_ty_2 = 121;
pub const _SC_NL_NMAX: _bindgen_ty_2 = 122;
pub const _SC_NL_SETMAX: _bindgen_ty_2 = 123;
pub const _SC_NL_TEXTMAX: _bindgen_ty_2 = 124;
pub const _SC_XBS5_ILP32_OFF32: _bindgen_ty_2 = 125;
pub const _SC_XBS5_ILP32_OFFBIG: _bindgen_ty_2 = 126;
pub const _SC_XBS5_LP64_OFF64: _bindgen_ty_2 = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: _bindgen_ty_2 = 128;
pub const _SC_XOPEN_LEGACY: _bindgen_ty_2 = 129;
pub const _SC_XOPEN_REALTIME: _bindgen_ty_2 = 130;
pub const _SC_XOPEN_REALTIME_THREADS: _bindgen_ty_2 = 131;
pub const _SC_ADVISORY_INFO: _bindgen_ty_2 = 132;
pub const _SC_BARRIERS: _bindgen_ty_2 = 133;
pub const _SC_BASE: _bindgen_ty_2 = 134;
pub const _SC_C_LANG_SUPPORT: _bindgen_ty_2 = 135;
pub const _SC_C_LANG_SUPPORT_R: _bindgen_ty_2 = 136;
pub const _SC_CLOCK_SELECTION: _bindgen_ty_2 = 137;
pub const _SC_CPUTIME: _bindgen_ty_2 = 138;
pub const _SC_THREAD_CPUTIME: _bindgen_ty_2 = 139;
pub const _SC_DEVICE_IO: _bindgen_ty_2 = 140;
pub const _SC_DEVICE_SPECIFIC: _bindgen_ty_2 = 141;
pub const _SC_DEVICE_SPECIFIC_R: _bindgen_ty_2 = 142;
pub const _SC_FD_MGMT: _bindgen_ty_2 = 143;
pub const _SC_FIFO: _bindgen_ty_2 = 144;
pub const _SC_PIPE: _bindgen_ty_2 = 145;
pub const _SC_FILE_ATTRIBUTES: _bindgen_ty_2 = 146;
pub const _SC_FILE_LOCKING: _bindgen_ty_2 = 147;
pub const _SC_FILE_SYSTEM: _bindgen_ty_2 = 148;
pub const _SC_MONOTONIC_CLOCK: _bindgen_ty_2 = 149;
pub const _SC_MULTI_PROCESS: _bindgen_ty_2 = 150;
pub const _SC_SINGLE_PROCESS: _bindgen_ty_2 = 151;
pub const _SC_NETWORKING: _bindgen_ty_2 = 152;
pub const _SC_READER_WRITER_LOCKS: _bindgen_ty_2 = 153;
pub const _SC_SPIN_LOCKS: _bindgen_ty_2 = 154;
pub const _SC_REGEXP: _bindgen_ty_2 = 155;
pub const _SC_REGEX_VERSION: _bindgen_ty_2 = 156;
pub const _SC_SHELL: _bindgen_ty_2 = 157;
pub const _SC_SIGNALS: _bindgen_ty_2 = 158;
pub const _SC_SPAWN: _bindgen_ty_2 = 159;
pub const _SC_SPORADIC_SERVER: _bindgen_ty_2 = 160;
pub const _SC_THREAD_SPORADIC_SERVER: _bindgen_ty_2 = 161;
pub const _SC_SYSTEM_DATABASE: _bindgen_ty_2 = 162;
pub const _SC_SYSTEM_DATABASE_R: _bindgen_ty_2 = 163;
pub const _SC_TIMEOUTS: _bindgen_ty_2 = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: _bindgen_ty_2 = 165;
pub const _SC_USER_GROUPS: _bindgen_ty_2 = 166;
pub const _SC_USER_GROUPS_R: _bindgen_ty_2 = 167;
pub const _SC_2_PBS: _bindgen_ty_2 = 168;
pub const _SC_2_PBS_ACCOUNTING: _bindgen_ty_2 = 169;
pub const _SC_2_PBS_LOCATE: _bindgen_ty_2 = 170;
pub const _SC_2_PBS_MESSAGE: _bindgen_ty_2 = 171;
pub const _SC_2_PBS_TRACK: _bindgen_ty_2 = 172;
pub const _SC_SYMLOOP_MAX: _bindgen_ty_2 = 173;
pub const _SC_STREAMS: _bindgen_ty_2 = 174;
pub const _SC_2_PBS_CHECKPOINT: _bindgen_ty_2 = 175;
pub const _SC_V6_ILP32_OFF32: _bindgen_ty_2 = 176;
pub const _SC_V6_ILP32_OFFBIG: _bindgen_ty_2 = 177;
pub const _SC_V6_LP64_OFF64: _bindgen_ty_2 = 178;
pub const _SC_V6_LPBIG_OFFBIG: _bindgen_ty_2 = 179;
pub const _SC_HOST_NAME_MAX: _bindgen_ty_2 = 180;
pub const _SC_TRACE: _bindgen_ty_2 = 181;
pub const _SC_TRACE_EVENT_FILTER: _bindgen_ty_2 = 182;
pub const _SC_TRACE_INHERIT: _bindgen_ty_2 = 183;
pub const _SC_TRACE_LOG: _bindgen_ty_2 = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: _bindgen_ty_2 = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: _bindgen_ty_2 = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: _bindgen_ty_2 = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: _bindgen_ty_2 = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: _bindgen_ty_2 = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: _bindgen_ty_2 = 190;
pub const _SC_LEVEL2_CACHE_SIZE: _bindgen_ty_2 = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: _bindgen_ty_2 = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: _bindgen_ty_2 = 193;
pub const _SC_LEVEL3_CACHE_SIZE: _bindgen_ty_2 = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: _bindgen_ty_2 = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: _bindgen_ty_2 = 196;
pub const _SC_LEVEL4_CACHE_SIZE: _bindgen_ty_2 = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: _bindgen_ty_2 = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: _bindgen_ty_2 = 199;
pub const _SC_IPV6: _bindgen_ty_2 = 235;
pub const _SC_RAW_SOCKETS: _bindgen_ty_2 = 236;
pub const _SC_V7_ILP32_OFF32: _bindgen_ty_2 = 237;
pub const _SC_V7_ILP32_OFFBIG: _bindgen_ty_2 = 238;
pub const _SC_V7_LP64_OFF64: _bindgen_ty_2 = 239;
pub const _SC_V7_LPBIG_OFFBIG: _bindgen_ty_2 = 240;
pub const _SC_SS_REPL_MAX: _bindgen_ty_2 = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: _bindgen_ty_2 = 242;
pub const _SC_TRACE_NAME_MAX: _bindgen_ty_2 = 243;
pub const _SC_TRACE_SYS_MAX: _bindgen_ty_2 = 244;
pub const _SC_TRACE_USER_EVENT_MAX: _bindgen_ty_2 = 245;
pub const _SC_XOPEN_STREAMS: _bindgen_ty_2 = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: _bindgen_ty_2 = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: _bindgen_ty_2 = 248;
pub const _SC_MINSIGSTKSZ: _bindgen_ty_2 = 249;
pub const _SC_SIGSTKSZ: _bindgen_ty_2 = 250;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const _CS_PATH: _bindgen_ty_3 = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 1;
pub const _CS_GNU_LIBC_VERSION: _bindgen_ty_3 = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: _bindgen_ty_3 = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: _bindgen_ty_3 = 5;
pub const _CS_LFS_CFLAGS: _bindgen_ty_3 = 1000;
pub const _CS_LFS_LDFLAGS: _bindgen_ty_3 = 1001;
pub const _CS_LFS_LIBS: _bindgen_ty_3 = 1002;
pub const _CS_LFS_LINTFLAGS: _bindgen_ty_3 = 1003;
pub const _CS_LFS64_CFLAGS: _bindgen_ty_3 = 1004;
pub const _CS_LFS64_LDFLAGS: _bindgen_ty_3 = 1005;
pub const _CS_LFS64_LIBS: _bindgen_ty_3 = 1006;
pub const _CS_LFS64_LINTFLAGS: _bindgen_ty_3 = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: _bindgen_ty_3 = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: _bindgen_ty_3 = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: _bindgen_ty_3 = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: _bindgen_ty_3 = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: _bindgen_ty_3 = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: _bindgen_ty_3 = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: _bindgen_ty_3 = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: _bindgen_ty_3 = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: _bindgen_ty_3 = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: _bindgen_ty_3 = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: _bindgen_ty_3 = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: _bindgen_ty_3 = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: _bindgen_ty_3 = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: _bindgen_ty_3 = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: _bindgen_ty_3 = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: _bindgen_ty_3 = 1147;
pub const _CS_V6_ENV: _bindgen_ty_3 = 1148;
pub const _CS_V7_ENV: _bindgen_ty_3 = 1149;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
extern "C" {
    pub fn pathconf(
        __path: *const ::std::os::raw::c_char,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fpathconf(
        __fd: ::std::os::raw::c_int,
        __name: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sysconf(__name: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn confstr(
        __name: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> usize;
}
extern "C" {
    pub fn getpid() -> __pid_t;
}
extern "C" {
    pub fn getppid() -> __pid_t;
}
extern "C" {
    pub fn getpgrp() -> __pid_t;
}
extern "C" {
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpgrp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsid() -> __pid_t;
}
extern "C" {
    pub fn getsid(__pid: __pid_t) -> __pid_t;
}
extern "C" {
    pub fn getuid() -> __uid_t;
}
extern "C" {
    pub fn geteuid() -> __uid_t;
}
extern "C" {
    pub fn getgid() -> __gid_t;
}
extern "C" {
    pub fn getegid() -> __gid_t;
}
extern "C" {
    pub fn getgroups(__size: ::std::os::raw::c_int, __list: *mut __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn group_member(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seteuid(__uid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setgid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setegid(__gid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresuid(
        __ruid: *mut __uid_t,
        __euid: *mut __uid_t,
        __suid: *mut __uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getresgid(
        __rgid: *mut __gid_t,
        __egid: *mut __gid_t,
        __sgid: *mut __gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresuid(__ruid: __uid_t, __euid: __uid_t, __suid: __uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setresgid(__rgid: __gid_t, __egid: __gid_t, __sgid: __gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fork() -> __pid_t;
}
extern "C" {
    pub fn vfork() -> __pid_t;
}
extern "C" {
    pub fn _Fork() -> __pid_t;
}
extern "C" {
    pub fn ttyname(__fd: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ttyname_r(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isatty(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn link(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn linkat(
        __fromfd: ::std::os::raw::c_int,
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn symlink(
        __from: *const ::std::os::raw::c_char,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlink(
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn symlinkat(
        __from: *const ::std::os::raw::c_char,
        __tofd: ::std::os::raw::c_int,
        __to: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn readlinkat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> isize;
}
extern "C" {
    pub fn unlink(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlinkat(
        __fd: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmdir(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetpgrp(__fd: ::std::os::raw::c_int) -> __pid_t;
}
extern "C" {
    pub fn tcsetpgrp(__fd: ::std::os::raw::c_int, __pgrp_id: __pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getlogin_r(
        __name: *mut ::std::os::raw::c_char,
        __name_len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setlogin(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getopt(
        ___argc: ::std::os::raw::c_int,
        ___argv: *const *mut ::std::os::raw::c_char,
        __shortopts: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostname(__name: *mut ::std::os::raw::c_char, __len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sethostid(__id: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdomainname(
        __name: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setdomainname(
        __name: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vhangup() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn revoke(__file: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn profil(
        __sample_buffer: *mut ::std::os::raw::c_ushort,
        __size: usize,
        __offset: usize,
        __scale: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acct(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn endusershell();
}
extern "C" {
    pub fn setusershell();
}
extern "C" {
    pub fn daemon(
        __nochdir: ::std::os::raw::c_int,
        __noclose: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chroot(__path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpass(__prompt: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fsync(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn syncfs(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn sync();
}
extern "C" {
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate(
        __file: *const ::std::os::raw::c_char,
        __length: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn truncate64(
        __file: *const ::std::os::raw::c_char,
        __length: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate(__fd: ::std::os::raw::c_int, __length: __off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftruncate64(__fd: ::std::os::raw::c_int, __length: __off64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn brk(__addr: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sbrk(__delta: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn syscall(__sysno: ::std::os::raw::c_long, ...) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lockf(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lockf64(
        __fd: ::std::os::raw::c_int,
        __cmd: ::std::os::raw::c_int,
        __len: __off64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn copy_file_range(
        __infd: ::std::os::raw::c_int,
        __pinoff: *mut __off64_t,
        __outfd: ::std::os::raw::c_int,
        __poutoff: *mut __off64_t,
        __length: usize,
        __flags: ::std::os::raw::c_uint,
    ) -> isize;
}
extern "C" {
    pub fn fdatasync(__fildes: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt(
        __key: *const ::std::os::raw::c_char,
        __salt: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        __from: *const ::std::os::raw::c_void,
        __to: *mut ::std::os::raw::c_void,
        __n: isize,
    );
}
extern "C" {
    pub fn getentropy(
        __buffer: *mut ::std::os::raw::c_void,
        __length: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn close_range(
        __fd: ::std::os::raw::c_uint,
        __max_fd: ::std::os::raw::c_uint,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gettid() -> __pid_t;
}
pub type std_nullptr_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn rawmemchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memrchr(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchrnul(
        __s: *mut ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strpbrk(
        __s: *mut ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *mut ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcasestr(
        __haystack: *mut ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __haystack: *const ::std::os::raw::c_void,
        __haystacklen: usize,
        __needle: *const ::std::os::raw::c_void,
        __needlelen: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn __mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mempcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerrordesc_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerrorname_np(__err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sigabbrev_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sigdescr_np(__sig: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strverscmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strfry(__string: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memfrob(__s: *mut ::std::os::raw::c_void, __n: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn basename(__filename: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
pub type zchar_t = ::std::os::raw::c_char;
pub type UINT64 = u64;
pub type INT64 = i64;
pub type FLOAT = f32;
pub type HWND = *mut ::std::os::raw::c_void;
#[doc = "<Success."]
pub const ZOOMSDK_SDKError_SDKERR_SUCCESS: ZOOMSDK_SDKError = 0;
#[doc = "<This feature is currently invalid."]
pub const ZOOMSDK_SDKError_SDKERR_NO_IMPL: ZOOMSDK_SDKError = 1;
#[doc = "<Incorrect usage of the feature."]
pub const ZOOMSDK_SDKError_SDKERR_WRONG_USAGE: ZOOMSDK_SDKError = 2;
#[doc = "<Wrong parameter."]
pub const ZOOMSDK_SDKError_SDKERR_INVALID_PARAMETER: ZOOMSDK_SDKError = 3;
#[doc = "<Loading module failed."]
pub const ZOOMSDK_SDKError_SDKERR_MODULE_LOAD_FAILED: ZOOMSDK_SDKError = 4;
#[doc = "<No memory is allocated."]
pub const ZOOMSDK_SDKError_SDKERR_MEMORY_FAILED: ZOOMSDK_SDKError = 5;
#[doc = "<Internal service error."]
pub const ZOOMSDK_SDKError_SDKERR_SERVICE_FAILED: ZOOMSDK_SDKError = 6;
#[doc = "<Not initialized before the usage."]
pub const ZOOMSDK_SDKError_SDKERR_UNINITIALIZE: ZOOMSDK_SDKError = 7;
#[doc = "<Not authorized before the usage."]
pub const ZOOMSDK_SDKError_SDKERR_UNAUTHENTICATION: ZOOMSDK_SDKError = 8;
#[doc = "<No recording in process."]
pub const ZOOMSDK_SDKError_SDKERR_NORECORDINGINPROCESS: ZOOMSDK_SDKError = 9;
#[doc = "<Transcoder module is not found."]
pub const ZOOMSDK_SDKError_SDKERR_TRANSCODER_NOFOUND: ZOOMSDK_SDKError = 10;
#[doc = "<The video service is not ready."]
pub const ZOOMSDK_SDKError_SDKERR_VIDEO_NOTREADY: ZOOMSDK_SDKError = 11;
#[doc = "<No permission."]
pub const ZOOMSDK_SDKError_SDKERR_NO_PERMISSION: ZOOMSDK_SDKError = 12;
#[doc = "<Unknown error."]
pub const ZOOMSDK_SDKError_SDKERR_UNKNOWN: ZOOMSDK_SDKError = 13;
#[doc = "<The other instance of the SDK is in process."]
pub const ZOOMSDK_SDKError_SDKERR_OTHER_SDK_INSTANCE_RUNNING: ZOOMSDK_SDKError = 14;
#[doc = "<SDK internal error."]
pub const ZOOMSDK_SDKError_SDKERR_INTERNAL_ERROR: ZOOMSDK_SDKError = 15;
#[doc = "<No audio device found."]
pub const ZOOMSDK_SDKError_SDKERR_NO_AUDIODEVICE_ISFOUND: ZOOMSDK_SDKError = 16;
#[doc = "<No video device found."]
pub const ZOOMSDK_SDKError_SDKERR_NO_VIDEODEVICE_ISFOUND: ZOOMSDK_SDKError = 17;
#[doc = "<API calls too frequently."]
pub const ZOOMSDK_SDKError_SDKERR_TOO_FREQUENT_CALL: ZOOMSDK_SDKError = 18;
#[doc = "<User can't be assigned with new privilege."]
pub const ZOOMSDK_SDKError_SDKERR_FAIL_ASSIGN_USER_PRIVILEGE: ZOOMSDK_SDKError = 19;
#[doc = "<The current meeting doesn't support the feature."]
pub const ZOOMSDK_SDKError_SDKERR_MEETING_DONT_SUPPORT_FEATURE: ZOOMSDK_SDKError = 20;
#[doc = "<The current user is not the presenter."]
pub const ZOOMSDK_SDKError_SDKERR_MEETING_NOT_SHARE_SENDER: ZOOMSDK_SDKError = 21;
#[doc = "<There is no sharing."]
pub const ZOOMSDK_SDKError_SDKERR_MEETING_YOU_HAVE_NO_SHARE: ZOOMSDK_SDKError = 22;
#[doc = "<Incorrect ViewType parameters."]
pub const ZOOMSDK_SDKError_SDKERR_MEETING_VIEWTYPE_PARAMETER_IS_WRONG: ZOOMSDK_SDKError = 23;
#[doc = "<Annotation is disabled."]
pub const ZOOMSDK_SDKError_SDKERR_MEETING_ANNOTATION_IS_OFF: ZOOMSDK_SDKError = 24;
#[doc = "<Current OS doesn't support the setting."]
pub const ZOOMSDK_SDKError_SDKERR_SETTING_OS_DONT_SUPPORT: ZOOMSDK_SDKError = 25;
#[doc = "<Email login is disable"]
pub const ZOOMSDK_SDKError_SDKERR_EMAIL_LOGIN_IS_DISABLED: ZOOMSDK_SDKError = 26;
#[doc = "<Computer doesn't meet the minimum requirements to use virtual background feature."]
pub const ZOOMSDK_SDKError_SDKERR_HARDWARE_NOT_MEET_FOR_VB: ZOOMSDK_SDKError = 27;
#[doc = "<Need process disclaimer."]
pub const ZOOMSDK_SDKError_SDKERR_NEED_USER_CONFIRM_RECORD_DISCLAIMER: ZOOMSDK_SDKError = 28;
#[doc = "<There is no raw data of sharing."]
pub const ZOOMSDK_SDKError_SDKERR_NO_SHARE_DATA: ZOOMSDK_SDKError = 29;
pub const ZOOMSDK_SDKError_SDKERR_SHARE_CANNOT_SUBSCRIBE_MYSELF: ZOOMSDK_SDKError = 30;
pub const ZOOMSDK_SDKError_SDKERR_NOT_IN_MEETING: ZOOMSDK_SDKError = 31;
pub const ZOOMSDK_SDKError_SDKERR_NOT_JOIN_AUDIO: ZOOMSDK_SDKError = 32;
#[doc = "<The current device doesn't support the feature."]
pub const ZOOMSDK_SDKError_SDKERR_HARDWARE_DONT_SUPPORT: ZOOMSDK_SDKError = 33;
pub const ZOOMSDK_SDKError_SDKERR_DOMAIN_DONT_SUPPORT: ZOOMSDK_SDKError = 34;
#[doc = "<Remote control is disabled."]
pub const ZOOMSDK_SDKError_SDKERR_MEETING_REMOTE_CONTROL_IS_OFF: ZOOMSDK_SDKError = 35;
pub const ZOOMSDK_SDKError_SDKERR_FILETRANSFER_ERROR: ZOOMSDK_SDKError = 36;
#[doc = " \\enum SDKError\n\\brief SDK error types.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_SDKError = ::std::os::raw::c_uint;
#[doc = "<For initialization."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Unknown: ZOOMSDK_SDK_LANGUAGE_ID = 0;
#[doc = "<In English."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_English: ZOOMSDK_SDK_LANGUAGE_ID = 1;
#[doc = "<In simplified Chinese."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Chinese_Simplified: ZOOMSDK_SDK_LANGUAGE_ID = 2;
#[doc = "<In traditional Chinese."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Chinese_Traditional: ZOOMSDK_SDK_LANGUAGE_ID = 3;
#[doc = "<In Japanese."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Japanese: ZOOMSDK_SDK_LANGUAGE_ID = 4;
#[doc = "<In Spanish."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Spanish: ZOOMSDK_SDK_LANGUAGE_ID = 5;
#[doc = "<In German."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_German: ZOOMSDK_SDK_LANGUAGE_ID = 6;
#[doc = "<In French."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_French: ZOOMSDK_SDK_LANGUAGE_ID = 7;
#[doc = "<In Portuguese."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Portuguese: ZOOMSDK_SDK_LANGUAGE_ID = 8;
#[doc = "<In Russian."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Russian: ZOOMSDK_SDK_LANGUAGE_ID = 9;
#[doc = "<In Korean."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Korean: ZOOMSDK_SDK_LANGUAGE_ID = 10;
#[doc = "<In Vietnamese."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Vietnamese: ZOOMSDK_SDK_LANGUAGE_ID = 11;
#[doc = "<In Italian."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Italian: ZOOMSDK_SDK_LANGUAGE_ID = 12;
#[doc = "<In Polish."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Polish: ZOOMSDK_SDK_LANGUAGE_ID = 13;
#[doc = "<In Turkish."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Turkish: ZOOMSDK_SDK_LANGUAGE_ID = 14;
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Indonesian: ZOOMSDK_SDK_LANGUAGE_ID = 15;
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Dutch: ZOOMSDK_SDK_LANGUAGE_ID = 16;
#[doc = "<In Swedish."]
pub const ZOOMSDK_SDK_LANGUAGE_ID_LANGUAGE_Swedish: ZOOMSDK_SDK_LANGUAGE_ID = 17;
#[doc = " \\enum SDK_LANGUAGE_ID\n\\brief The text resource type used by the SDK.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_SDK_LANGUAGE_ID = ::std::os::raw::c_uint;
pub const ZOOMSDK_ZoomSDKRawDataMemoryMode_ZoomSDKRawDataMemoryModeStack:
    ZOOMSDK_ZoomSDKRawDataMemoryMode = 0;
pub const ZOOMSDK_ZoomSDKRawDataMemoryMode_ZoomSDKRawDataMemoryModeHeap:
    ZOOMSDK_ZoomSDKRawDataMemoryMode = 1;
pub type ZOOMSDK_ZoomSDKRawDataMemoryMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagRawDataOptions {
    #[doc = "<false -- YUV420data, true -- intermediate data"]
    pub enableRawdataIntermediateMode: bool,
    pub videoRawdataMemoryMode: ZOOMSDK_ZoomSDKRawDataMemoryMode,
    pub shareRawdataMemoryMode: ZOOMSDK_ZoomSDKRawDataMemoryMode,
    pub audioRawdataMemoryMode: ZOOMSDK_ZoomSDKRawDataMemoryMode,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagRawDataOptions"]
        [::std::mem::size_of::<ZOOMSDK_tagRawDataOptions>() - 16usize];
    ["Alignment of ZOOMSDK_tagRawDataOptions"]
        [::std::mem::align_of::<ZOOMSDK_tagRawDataOptions>() - 4usize];
    ["Offset of field: ZOOMSDK_tagRawDataOptions::enableRawdataIntermediateMode"]
        [::std::mem::offset_of!(ZOOMSDK_tagRawDataOptions, enableRawdataIntermediateMode) - 0usize];
    ["Offset of field: ZOOMSDK_tagRawDataOptions::videoRawdataMemoryMode"]
        [::std::mem::offset_of!(ZOOMSDK_tagRawDataOptions, videoRawdataMemoryMode) - 4usize];
    ["Offset of field: ZOOMSDK_tagRawDataOptions::shareRawdataMemoryMode"]
        [::std::mem::offset_of!(ZOOMSDK_tagRawDataOptions, shareRawdataMemoryMode) - 8usize];
    ["Offset of field: ZOOMSDK_tagRawDataOptions::audioRawdataMemoryMode"]
        [::std::mem::offset_of!(ZOOMSDK_tagRawDataOptions, audioRawdataMemoryMode) - 12usize];
};
pub type ZOOMSDK_RawDataOptions = ZOOMSDK_tagRawDataOptions;
#[doc = " \\struct tagInitParam\n\\brief Initialize the SDK Parameter.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagInitParam {
    #[doc = "<Web domain."]
    pub strWebDomain: *const zchar_t,
    #[doc = "<Branding name."]
    pub strBrandingName: *const zchar_t,
    #[doc = "<Support URL."]
    pub strSupportUrl: *const zchar_t,
    #[doc = "<The ID of the SDK language."]
    pub emLanguageID: ZOOMSDK_SDK_LANGUAGE_ID,
    #[doc = "<Enable generate dump file if the app crashed."]
    pub enableGenerateDump: bool,
    #[doc = "<Enable log feature."]
    pub enableLogByDefault: bool,
    #[doc = "<Size of a log file in M(megabyte). The default size is 5M. There are 5 log files in total and the file size varies from 1M to 50M."]
    pub uiLogFileSize: ::std::os::raw::c_uint,
    pub rawdataOpts: ZOOMSDK_RawDataOptions,
    pub wrapperType: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagInitParam"][::std::mem::size_of::<ZOOMSDK_tagInitParam>() - 56usize];
    ["Alignment of ZOOMSDK_tagInitParam"][::std::mem::align_of::<ZOOMSDK_tagInitParam>() - 8usize];
    ["Offset of field: ZOOMSDK_tagInitParam::strWebDomain"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, strWebDomain) - 0usize];
    ["Offset of field: ZOOMSDK_tagInitParam::strBrandingName"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, strBrandingName) - 8usize];
    ["Offset of field: ZOOMSDK_tagInitParam::strSupportUrl"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, strSupportUrl) - 16usize];
    ["Offset of field: ZOOMSDK_tagInitParam::emLanguageID"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, emLanguageID) - 24usize];
    ["Offset of field: ZOOMSDK_tagInitParam::enableGenerateDump"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, enableGenerateDump) - 28usize];
    ["Offset of field: ZOOMSDK_tagInitParam::enableLogByDefault"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, enableLogByDefault) - 29usize];
    ["Offset of field: ZOOMSDK_tagInitParam::uiLogFileSize"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, uiLogFileSize) - 32usize];
    ["Offset of field: ZOOMSDK_tagInitParam::rawdataOpts"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, rawdataOpts) - 36usize];
    ["Offset of field: ZOOMSDK_tagInitParam::wrapperType"]
        [::std::mem::offset_of!(ZOOMSDK_tagInitParam, wrapperType) - 52usize];
};
#[doc = " \\struct tagInitParam\n\\brief Initialize the SDK Parameter.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_InitParam = ZOOMSDK_tagInitParam;
#[doc = "<Type unknown."]
pub const ZOOMSDK_ShareType_SHARE_TYPE_UNKNOWN: ZOOMSDK_ShareType = 0;
#[doc = "<Type of sharing the application."]
pub const ZOOMSDK_ShareType_SHARE_TYPE_AS: ZOOMSDK_ShareType = 1;
#[doc = "<Type of sharing the desktop."]
pub const ZOOMSDK_ShareType_SHARE_TYPE_DS: ZOOMSDK_ShareType = 2;
#[doc = "<Type of sharing the white-board."]
pub const ZOOMSDK_ShareType_SHARE_TYPE_WB: ZOOMSDK_ShareType = 3;
#[doc = "<Type of sharing data from the device connected WIFI."]
pub const ZOOMSDK_ShareType_SHARE_TYPE_AIRHOST: ZOOMSDK_ShareType = 4;
#[doc = "<Type of sharing the camera."]
pub const ZOOMSDK_ShareType_SHARE_TYPE_CAMERA: ZOOMSDK_ShareType = 5;
#[doc = "<Type of sharing the data."]
pub const ZOOMSDK_ShareType_SHARE_TYPE_DATA: ZOOMSDK_ShareType = 6;
#[doc = "<Type of sharing the video file."]
pub const ZOOMSDK_ShareType_SHARE_TYPE_VIDEO_FILE: ZOOMSDK_ShareType = 7;
#[doc = " \\enum ShareType\nType of current sharing received by the user.\nHere are more detailed structural descriptions.."]
pub type ZOOMSDK_ShareType = ::std::os::raw::c_uint;
#[doc = "<No error."]
pub const ZOOMSDK_LastErrorType_LastErrorType_None: ZOOMSDK_LastErrorType = 0;
#[doc = "<Error during verification."]
pub const ZOOMSDK_LastErrorType_LastErrorType_Auth: ZOOMSDK_LastErrorType = 1;
#[doc = "<Error during login."]
pub const ZOOMSDK_LastErrorType_LastErrorType_Login: ZOOMSDK_LastErrorType = 2;
#[doc = "<The associated error with the meeting."]
pub const ZOOMSDK_LastErrorType_LastErrorType_Meeting: ZOOMSDK_LastErrorType = 3;
#[doc = "<The associated error with the SDK bottom layer."]
pub const ZOOMSDK_LastErrorType_LastErrorType_System: ZOOMSDK_LastErrorType = 4;
#[doc = " \\enum LastErrorType\n\\brief The last error types of the SDK.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_LastErrorType = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IZoomLastError__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Error mechanism interface provided by the SDK\nThis feature is gradually improved, so some errors may not be supported."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomLastError {
    pub vtable_: *const ZOOMSDK_IZoomLastError__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomLastError"][::std::mem::size_of::<ZOOMSDK_IZoomLastError>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomLastError"]
        [::std::mem::align_of::<ZOOMSDK_IZoomLastError>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IList__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IList {
    pub vtable_: *const ZOOMSDK_IList__bindgen_vtable,
}
pub const ZOOMSDK_FrameDataFormat_FrameDataFormat_I420_LIMITED: ZOOMSDK_FrameDataFormat = 0;
pub const ZOOMSDK_FrameDataFormat_FrameDataFormat_I420_FULL: ZOOMSDK_FrameDataFormat = 1;
pub type ZOOMSDK_FrameDataFormat = ::std::os::raw::c_uint;
pub const ZOOMSDK_ZoomSDKAudioChannel_ZoomSDKAudioChannel_Mono: ZOOMSDK_ZoomSDKAudioChannel = 0;
pub const ZOOMSDK_ZoomSDKAudioChannel_ZoomSDKAudioChannel_Stereo: ZOOMSDK_ZoomSDKAudioChannel = 1;
pub type ZOOMSDK_ZoomSDKAudioChannel = ::std::os::raw::c_uint;
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_None: ZOOMSDK_CannotShareReasonType =
    0;
#[doc = "<Only the host can share."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Locked:
    ZOOMSDK_CannotShareReasonType = 1;
#[doc = "<Sharing is disabled."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Disabled:
    ZOOMSDK_CannotShareReasonType = 2;
#[doc = "<Another is sharing their screen."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Other_Screen_Sharing:
    ZOOMSDK_CannotShareReasonType = 3;
#[doc = "<Another is sharing their whiteboard."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Other_WB_Sharing:
    ZOOMSDK_CannotShareReasonType = 4;
#[doc = "<The user is sharing their screen, and can grab. To grab, call EnableGrabShareWithoutReminder(true) before starting share."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Need_Grab_Myself_Screen_Sharing:
    ZOOMSDK_CannotShareReasonType = 5;
#[doc = "<Another is sharing their screen, and can grab. To grab, call EnableGrabShareWithoutReminder(true) before starting share."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Need_Grab_Other_Screen_Sharing:
    ZOOMSDK_CannotShareReasonType = 6;
#[doc = "<Another is sharing pure computer audio, and can grab. To grab, call EnableGrabShareWithoutReminder(true) before starting share."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Need_Grab_Audio_Sharing:
    ZOOMSDK_CannotShareReasonType = 7;
#[doc = "<Other or myself is sharing whiteboard, and can Grab. To grab, call EnableGrabShareWithoutReminder(true) before starting share."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Need_Grap_WB_Sharing:
    ZOOMSDK_CannotShareReasonType = 8;
#[doc = "<The meeting has reached the maximum allowed screen share sessions."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Reach_Maximum:
    ZOOMSDK_CannotShareReasonType = 9;
#[doc = "<Other share screen in main session."]
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_Have_Share_From_Mainsession:
    ZOOMSDK_CannotShareReasonType = 10;
pub const ZOOMSDK_CannotShareReasonType_CannotShareReasonType_UnKnown:
    ZOOMSDK_CannotShareReasonType = 11;
pub type ZOOMSDK_CannotShareReasonType = ::std::os::raw::c_uint;
#[doc = "<Begin to share by the user himself."]
pub const ZOOMSDK_SharingStatus_Sharing_Self_Send_Begin: ZOOMSDK_SharingStatus = 0;
#[doc = "<Stop sharing by the user."]
pub const ZOOMSDK_SharingStatus_Sharing_Self_Send_End: ZOOMSDK_SharingStatus = 1;
#[doc = "<Begin to share pure audio by the user himself."]
pub const ZOOMSDK_SharingStatus_Sharing_Self_Send_Pure_Audio_Begin: ZOOMSDK_SharingStatus = 2;
#[doc = "<Stop sharing pure audio by the user."]
pub const ZOOMSDK_SharingStatus_Sharing_Self_Send_Pure_Audio_End: ZOOMSDK_SharingStatus = 3;
#[doc = "<Others begin to share."]
pub const ZOOMSDK_SharingStatus_Sharing_Other_Share_Begin: ZOOMSDK_SharingStatus = 4;
#[doc = "<Others stop sharing."]
pub const ZOOMSDK_SharingStatus_Sharing_Other_Share_End: ZOOMSDK_SharingStatus = 5;
#[doc = "<Others begin to share pure audio."]
pub const ZOOMSDK_SharingStatus_Sharing_Other_Share_Pure_Audio_Begin: ZOOMSDK_SharingStatus = 6;
#[doc = "<Others stop sharing pure audio."]
pub const ZOOMSDK_SharingStatus_Sharing_Other_Share_Pure_Audio_End: ZOOMSDK_SharingStatus = 7;
#[doc = "<View the sharing of others."]
pub const ZOOMSDK_SharingStatus_Sharing_View_Other_Sharing: ZOOMSDK_SharingStatus = 8;
#[doc = "<Pause sharing."]
pub const ZOOMSDK_SharingStatus_Sharing_Pause: ZOOMSDK_SharingStatus = 9;
#[doc = "<Resume sharing."]
pub const ZOOMSDK_SharingStatus_Sharing_Resume: ZOOMSDK_SharingStatus = 10;
#[doc = " \\enum SharingStatus\n\\brief Sharing status.\nHere are more detailed structural descriptions.."]
pub type ZOOMSDK_SharingStatus = ::std::os::raw::c_uint;
#[doc = " \\struct ZoomSDKColor\n\\brief Zoom SDK color.\nThe standard RGB color model has a value range of 0-255."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_ZoomSDKColor {
    pub red: ::std::os::raw::c_uint,
    pub green: ::std::os::raw::c_uint,
    pub blue: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ZoomSDKColor"][::std::mem::size_of::<ZOOMSDK_ZoomSDKColor>() - 12usize];
    ["Alignment of ZOOMSDK_ZoomSDKColor"][::std::mem::align_of::<ZOOMSDK_ZoomSDKColor>() - 4usize];
    ["Offset of field: ZOOMSDK_ZoomSDKColor::red"]
        [::std::mem::offset_of!(ZOOMSDK_ZoomSDKColor, red) - 0usize];
    ["Offset of field: ZOOMSDK_ZoomSDKColor::green"]
        [::std::mem::offset_of!(ZOOMSDK_ZoomSDKColor, green) - 4usize];
    ["Offset of field: ZOOMSDK_ZoomSDKColor::blue"]
        [::std::mem::offset_of!(ZOOMSDK_ZoomSDKColor, blue) - 8usize];
};
#[doc = "<Authentication is successful."]
pub const ZOOMSDK_AuthResult_AUTHRET_SUCCESS: ZOOMSDK_AuthResult = 0;
#[doc = "<The key or secret to authenticate is empty."]
pub const ZOOMSDK_AuthResult_AUTHRET_KEYORSECRETEMPTY: ZOOMSDK_AuthResult = 1;
#[doc = "<The key or secret to authenticate is wrong."]
pub const ZOOMSDK_AuthResult_AUTHRET_KEYORSECRETWRONG: ZOOMSDK_AuthResult = 2;
#[doc = "<The user account does not support."]
pub const ZOOMSDK_AuthResult_AUTHRET_ACCOUNTNOTSUPPORT: ZOOMSDK_AuthResult = 3;
#[doc = "<The user account is not enabled for SDK."]
pub const ZOOMSDK_AuthResult_AUTHRET_ACCOUNTNOTENABLESDK: ZOOMSDK_AuthResult = 4;
#[doc = "<Unknown error."]
pub const ZOOMSDK_AuthResult_AUTHRET_UNKNOWN: ZOOMSDK_AuthResult = 5;
#[doc = "<Service is busy."]
pub const ZOOMSDK_AuthResult_AUTHRET_SERVICE_BUSY: ZOOMSDK_AuthResult = 6;
#[doc = "<Initial status."]
pub const ZOOMSDK_AuthResult_AUTHRET_NONE: ZOOMSDK_AuthResult = 7;
#[doc = "<Time out."]
pub const ZOOMSDK_AuthResult_AUTHRET_OVERTIME: ZOOMSDK_AuthResult = 8;
#[doc = "<Network issues."]
pub const ZOOMSDK_AuthResult_AUTHRET_NETWORKISSUE: ZOOMSDK_AuthResult = 9;
pub const ZOOMSDK_AuthResult_AUTHRET_CLIENT_INCOMPATIBLE: ZOOMSDK_AuthResult = 10;
#[doc = "<The jwt token to authenticate is wrong."]
pub const ZOOMSDK_AuthResult_AUTHRET_JWTTOKENWRONG: ZOOMSDK_AuthResult = 11;
#[doc = "<The authentication rate limit is exceeded."]
pub const ZOOMSDK_AuthResult_AUTHRET_LIMIT_EXCEEDED_EXCEPTION: ZOOMSDK_AuthResult = 12;
#[doc = " \\enum AuthResult\n\\brief SDK Authentication Result.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_AuthResult = ::std::os::raw::c_uint;
#[doc = "<Unlogged in."]
pub const ZOOMSDK_LOGINSTATUS_LOGIN_IDLE: ZOOMSDK_LOGINSTATUS = 0;
#[doc = "<In process of login."]
pub const ZOOMSDK_LOGINSTATUS_LOGIN_PROCESSING: ZOOMSDK_LOGINSTATUS = 1;
#[doc = "<Login successful."]
pub const ZOOMSDK_LOGINSTATUS_LOGIN_SUCCESS: ZOOMSDK_LOGINSTATUS = 2;
#[doc = "<Login failed."]
pub const ZOOMSDK_LOGINSTATUS_LOGIN_FAILED: ZOOMSDK_LOGINSTATUS = 3;
#[doc = " \\enum LOGINSTATUS\n\\brief Login status.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_LOGINSTATUS = ::std::os::raw::c_uint;
pub const ZOOMSDK_LoginFailReason_LoginFail_None: ZOOMSDK_LoginFailReason = 0;
pub const ZOOMSDK_LoginFailReason_LoginFail_EmailLoginDisable: ZOOMSDK_LoginFailReason = 1;
pub const ZOOMSDK_LoginFailReason_LoginFail_UserNotExist: ZOOMSDK_LoginFailReason = 2;
pub const ZOOMSDK_LoginFailReason_LoginFail_WrongPassword: ZOOMSDK_LoginFailReason = 3;
pub const ZOOMSDK_LoginFailReason_LoginFail_AccountLocked: ZOOMSDK_LoginFailReason = 4;
pub const ZOOMSDK_LoginFailReason_LoginFail_SDKNeedUpdate: ZOOMSDK_LoginFailReason = 5;
pub const ZOOMSDK_LoginFailReason_LoginFail_TooManyFailedAttempts: ZOOMSDK_LoginFailReason = 6;
pub const ZOOMSDK_LoginFailReason_LoginFail_SMSCodeError: ZOOMSDK_LoginFailReason = 7;
pub const ZOOMSDK_LoginFailReason_LoginFail_SMSCodeExpired: ZOOMSDK_LoginFailReason = 8;
pub const ZOOMSDK_LoginFailReason_LoginFail_PhoneNumberFormatInValid: ZOOMSDK_LoginFailReason = 9;
pub const ZOOMSDK_LoginFailReason_LoginFail_LoginTokenInvalid: ZOOMSDK_LoginFailReason = 10;
pub const ZOOMSDK_LoginFailReason_LoginFail_UserDisagreeLoginDisclaimer: ZOOMSDK_LoginFailReason =
    11;
pub const ZOOMSDK_LoginFailReason_LoginFail_Mfa_Required: ZOOMSDK_LoginFailReason = 12;
pub const ZOOMSDK_LoginFailReason_LoginFail_Need_Bitrthday_ask: ZOOMSDK_LoginFailReason = 13;
pub const ZOOMSDK_LoginFailReason_LoginFail_OtherIssue: ZOOMSDK_LoginFailReason = 100;
pub type ZOOMSDK_LoginFailReason = ::std::os::raw::c_uint;
#[doc = " \\struct tagAuthContext\n\\brief SDK Authentication parameter with jwt token.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagAuthContext {
    pub jwt_token: *const zchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagAuthContext"][::std::mem::size_of::<ZOOMSDK_tagAuthContext>() - 8usize];
    ["Alignment of ZOOMSDK_tagAuthContext"]
        [::std::mem::align_of::<ZOOMSDK_tagAuthContext>() - 8usize];
    ["Offset of field: ZOOMSDK_tagAuthContext::jwt_token"]
        [::std::mem::offset_of!(ZOOMSDK_tagAuthContext, jwt_token) - 0usize];
};
#[doc = " \\struct tagAuthContext\n\\brief SDK Authentication parameter with jwt token.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_AuthContext = ZOOMSDK_tagAuthContext;
#[doc = "<Unknown type."]
pub const ZOOMSDK_LoginType_LoginType_Unknown: ZOOMSDK_LoginType = 0;
#[doc = "<Login with SSO token."]
pub const ZOOMSDK_LoginType_LoginType_SSO: ZOOMSDK_LoginType = 1;
#[doc = " \\enum LoginType\n\\brief User login type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_LoginType = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IAccountInfo__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Account information interface.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IAccountInfo {
    pub vtable_: *const ZOOMSDK_IAccountInfo__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IAccountInfo"][::std::mem::size_of::<ZOOMSDK_IAccountInfo>() - 8usize];
    ["Alignment of ZOOMSDK_IAccountInfo"][::std::mem::align_of::<ZOOMSDK_IAccountInfo>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IAuthServiceEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Authentication service callback event.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IAuthServiceEvent {
    pub vtable_: *const ZOOMSDK_IAuthServiceEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IAuthServiceEvent"]
        [::std::mem::size_of::<ZOOMSDK_IAuthServiceEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IAuthServiceEvent"]
        [::std::mem::align_of::<ZOOMSDK_IAuthServiceEvent>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IAuthService__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Authentication Service Interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IAuthService {
    pub vtable_: *const ZOOMSDK_IAuthService__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IAuthService"][::std::mem::size_of::<ZOOMSDK_IAuthService>() - 8usize];
    ["Alignment of ZOOMSDK_IAuthService"][::std::mem::align_of::<ZOOMSDK_IAuthService>() - 8usize];
};
#[doc = "<No meeting is running."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_IDLE: ZOOMSDK_MeetingStatus = 0;
#[doc = "<Connect to the meeting server status."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_CONNECTING: ZOOMSDK_MeetingStatus = 1;
#[doc = "<Waiting for the host to start the meeting."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_WAITINGFORHOST: ZOOMSDK_MeetingStatus = 2;
#[doc = "<Meeting is ready, in meeting status."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_INMEETING: ZOOMSDK_MeetingStatus = 3;
#[doc = "<Disconnect the meeting server, leave meeting status."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_DISCONNECTING: ZOOMSDK_MeetingStatus = 4;
#[doc = "<Reconnecting meeting server status."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_RECONNECTING: ZOOMSDK_MeetingStatus = 5;
#[doc = "<Failed to connect the meeting server."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_FAILED: ZOOMSDK_MeetingStatus = 6;
#[doc = "<Meeting ends."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_ENDED: ZOOMSDK_MeetingStatus = 7;
#[doc = "<Unknown status."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_UNKNOWN: ZOOMSDK_MeetingStatus = 8;
#[doc = "<Meeting is locked to prevent the further participants to join the meeting."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_LOCKED: ZOOMSDK_MeetingStatus = 9;
#[doc = "<Meeting is open and participants can join the meeting."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_UNLOCKED: ZOOMSDK_MeetingStatus = 10;
#[doc = "<Participants who join the meeting before the start are in the waiting room."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_IN_WAITING_ROOM: ZOOMSDK_MeetingStatus = 11;
#[doc = "<Upgrade the attendees to panelist in webinar."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_WEBINAR_PROMOTE: ZOOMSDK_MeetingStatus = 12;
#[doc = "<Downgrade the attendees from the panelist."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_WEBINAR_DEPROMOTE: ZOOMSDK_MeetingStatus = 13;
#[doc = "<Join the breakout room."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_JOIN_BREAKOUT_ROOM: ZOOMSDK_MeetingStatus = 14;
#[doc = "<Leave the breakout room."]
pub const ZOOMSDK_MeetingStatus_MEETING_STATUS_LEAVE_BREAKOUT_ROOM: ZOOMSDK_MeetingStatus = 15;
#[doc = " \\enum MeetingStatus\n\\brief Meeting status.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_MeetingStatus = ::std::os::raw::c_uint;
#[doc = "<Start meeting successfully."]
pub const ZOOMSDK_MeetingFailCode_MEETING_SUCCESS: ZOOMSDK_MeetingFailCode = 0;
#[doc = "<Network error."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_NETWORK_ERR: ZOOMSDK_MeetingFailCode = 1;
#[doc = "<Reconnect error."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_RECONNECT_ERR: ZOOMSDK_MeetingFailCode = 2;
#[doc = "<Multi-media Router error."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_MMR_ERR: ZOOMSDK_MeetingFailCode = 3;
#[doc = "<Password is wrong."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_PASSWORD_ERR: ZOOMSDK_MeetingFailCode = 4;
#[doc = "<Session error."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_SESSION_ERR: ZOOMSDK_MeetingFailCode = 5;
#[doc = "<Meeting is over."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_MEETING_OVER: ZOOMSDK_MeetingFailCode = 6;
#[doc = "<Meeting has not begun."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_MEETING_NOT_START: ZOOMSDK_MeetingFailCode = 7;
#[doc = "<Meeting does not exist."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_MEETING_NOT_EXIST: ZOOMSDK_MeetingFailCode = 8;
#[doc = "<The capacity of meeting is full. For users that can't join meeting, they can go to watch live stream with the callback IMeetingServiceEvent::onMeetingFullToWatchLiveStream if the host has started."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_MEETING_USER_FULL: ZOOMSDK_MeetingFailCode = 9;
#[doc = "<The client is incompatible."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_CLIENT_INCOMPATIBLE: ZOOMSDK_MeetingFailCode = 10;
#[doc = "<The Multi-media router is not founded."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_NO_MMR: ZOOMSDK_MeetingFailCode = 11;
#[doc = "<The meeting is locked."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_CONFLOCKED: ZOOMSDK_MeetingFailCode = 12;
#[doc = "<The meeting is failed because of the restriction by the same account."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_MEETING_RESTRICTED: ZOOMSDK_MeetingFailCode = 13;
#[doc = "<The meeting is restricted by the same account while the attendee is allowed to join before the host."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_MEETING_RESTRICTED_JBH: ZOOMSDK_MeetingFailCode = 14;
#[doc = "<Unable to send web request."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_CANNOT_EMIT_WEBREQUEST: ZOOMSDK_MeetingFailCode = 15;
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_CANNOT_START_TOKENEXPIRE: ZOOMSDK_MeetingFailCode =
    16;
#[doc = "<Video hardware or software error."]
pub const ZOOMSDK_MeetingFailCode_SESSION_VIDEO_ERR: ZOOMSDK_MeetingFailCode = 17;
#[doc = "<Audio autostart error."]
pub const ZOOMSDK_MeetingFailCode_SESSION_AUDIO_AUTOSTARTERR: ZOOMSDK_MeetingFailCode = 18;
#[doc = "<The number of webinar registered has reached the upper limit."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_REGISTERWEBINAR_FULL: ZOOMSDK_MeetingFailCode = 19;
#[doc = "<Register webinar with the role of webinar host."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_REGISTERWEBINAR_HOSTREGISTER:
    ZOOMSDK_MeetingFailCode = 20;
#[doc = "<Register webinar with the role of panelist member."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_REGISTERWEBINAR_PANELISTREGISTER:
    ZOOMSDK_MeetingFailCode = 21;
#[doc = "<Register webinar with the denied email."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_REGISTERWEBINAR_DENIED_EMAIL:
    ZOOMSDK_MeetingFailCode = 22;
#[doc = "<Webinar request to login."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_ENFORCE_LOGIN: ZOOMSDK_MeetingFailCode = 23;
#[doc = "<Invalid for Windows SDK."]
pub const ZOOMSDK_MeetingFailCode_CONF_FAIL_ZC_CERTIFICATE_CHANGED: ZOOMSDK_MeetingFailCode = 24;
#[doc = "<Vanity conference ID does not exist."]
pub const ZOOMSDK_MeetingFailCode_CONF_FAIL_VANITY_NOT_EXIST: ZOOMSDK_MeetingFailCode = 27;
#[doc = "<Join webinar with the same email."]
pub const ZOOMSDK_MeetingFailCode_CONF_FAIL_JOIN_WEBINAR_WITHSAMEEMAIL: ZOOMSDK_MeetingFailCode =
    28;
#[doc = "<Meeting settings is not allowed to start a meeting."]
pub const ZOOMSDK_MeetingFailCode_CONF_FAIL_DISALLOW_HOST_MEETING: ZOOMSDK_MeetingFailCode = 29;
#[doc = "<Disabled to write the configure file."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_WRITE_CONFIG_FILE: ZOOMSDK_MeetingFailCode = 50;
#[doc = "<Forbidden to join the internal meeting."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_FORBID_TO_JOIN_INTERNAL_MEETING:
    ZOOMSDK_MeetingFailCode = 60;
#[doc = "<Removed by the host."]
pub const ZOOMSDK_MeetingFailCode_CONF_FAIL_REMOVED_BY_HOST: ZOOMSDK_MeetingFailCode = 61;
#[doc = "<Forbidden to join meeting"]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_HOST_DISALLOW_OUTSIDE_USER_JOIN:
    ZOOMSDK_MeetingFailCode = 62;
#[doc = "<To join a meeting hosted by an external Zoom account, your SDK app has to be published on Zoom Marketplace. You can refer to Section 6.1 of Zoom's API License Terms of Use."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_UNABLE_TO_JOIN_EXTERNAL_MEETING:
    ZOOMSDK_MeetingFailCode = 63;
#[doc = "<Join failed because this Meeting SDK key is blocked by the host's account admin."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_BLOCKED_BY_ACCOUNT_ADMIN: ZOOMSDK_MeetingFailCode =
    64;
#[doc = "<Need sign in using the same account as the meeting organizer."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_NEED_SIGN_IN_FOR_PRIVATE_MEETING:
    ZOOMSDK_MeetingFailCode = 82;
#[doc = "<App join token error."]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_APP_PRIVILEGE_TOKEN_ERROR: ZOOMSDK_MeetingFailCode =
    500;
#[doc = "<Jmak user email not match"]
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_JMAK_USER_EMAIL_NOT_MATCH: ZOOMSDK_MeetingFailCode =
    1143;
pub const ZOOMSDK_MeetingFailCode_MEETING_FAIL_UNKNOWN: ZOOMSDK_MeetingFailCode = 65535;
#[doc = " \\enum MeetingFailCode.\n\\brief Meeting failure code.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_MeetingFailCode = ::std::os::raw::c_uint;
#[doc = "<For initialization."]
pub const ZOOMSDK_MeetingEndReason_EndMeetingReason_None: ZOOMSDK_MeetingEndReason = 0;
#[doc = "<Kicked by host."]
pub const ZOOMSDK_MeetingEndReason_EndMeetingReason_KickByHost: ZOOMSDK_MeetingEndReason = 1;
#[doc = "<Ended by host."]
pub const ZOOMSDK_MeetingEndReason_EndMeetingReason_EndByHost: ZOOMSDK_MeetingEndReason = 2;
#[doc = "<JBH times out."]
pub const ZOOMSDK_MeetingEndReason_EndMeetingReason_JBHTimeOut: ZOOMSDK_MeetingEndReason = 3;
#[doc = "<No attendee."]
pub const ZOOMSDK_MeetingEndReason_EndMeetingReason_NoAttendee: ZOOMSDK_MeetingEndReason = 4;
#[doc = "<Host starts another meeting."]
pub const ZOOMSDK_MeetingEndReason_EndMeetingReason_HostStartAnotherMeeting:
    ZOOMSDK_MeetingEndReason = 5;
#[doc = "<Free meeting times out."]
pub const ZOOMSDK_MeetingEndReason_EndMeetingReason_FreeMeetingTimeOut: ZOOMSDK_MeetingEndReason =
    6;
#[doc = "<Network is broken."]
pub const ZOOMSDK_MeetingEndReason_EndMeetingReason_NetworkBroken: ZOOMSDK_MeetingEndReason = 7;
#[doc = " \\enum MeetingEndReason\n\\brief Meeting end reason.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_MeetingEndReason = ::std::os::raw::c_uint;
#[doc = "<For initialization."]
pub const ZOOMSDK_MeetingType_MEETING_TYPE_NONE: ZOOMSDK_MeetingType = 0;
#[doc = "<Ordinary meeting."]
pub const ZOOMSDK_MeetingType_MEETING_TYPE_NORMAL: ZOOMSDK_MeetingType = 1;
#[doc = "<Webinar."]
pub const ZOOMSDK_MeetingType_MEETING_TYPE_WEBINAR: ZOOMSDK_MeetingType = 2;
#[doc = "<Breakout meeting."]
pub const ZOOMSDK_MeetingType_MEETING_TYPE_BREAKOUTROOM: ZOOMSDK_MeetingType = 3;
#[doc = " \\enum MeetingType\n\\brief Meeting type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_MeetingType = ::std::os::raw::c_uint;
#[doc = "<Leave meeting"]
pub const ZOOMSDK_LeaveMeetingCmd_LEAVE_MEETING: ZOOMSDK_LeaveMeetingCmd = 0;
#[doc = "<End meeting"]
pub const ZOOMSDK_LeaveMeetingCmd_END_MEETING: ZOOMSDK_LeaveMeetingCmd = 1;
#[doc = " \\enum LeaveMeetingCmd\n\\brief Leave meeting command.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_LeaveMeetingCmd = ::std::os::raw::c_uint;
#[doc = "<Type of ordinary user who needs to login."]
pub const ZOOMSDK_SDKUserType_SDK_UT_NORMALUSER: ZOOMSDK_SDKUserType = 100;
#[doc = "<Start meeting without login."]
pub const ZOOMSDK_SDKUserType_SDK_UT_WITHOUT_LOGIN: ZOOMSDK_SDKUserType = 101;
#[doc = " \\enum SDKUserType\n\\brief SDK user type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_SDKUserType = ::std::os::raw::c_uint;
#[doc = "<The sampling rate of the acquired raw audio data is 32K."]
pub const ZOOMSDK_AudioRawdataSamplingRate_AudioRawdataSamplingRate_32K:
    ZOOMSDK_AudioRawdataSamplingRate = 0;
#[doc = "<The sampling rate of the acquired raw audio data is 48K."]
pub const ZOOMSDK_AudioRawdataSamplingRate_AudioRawdataSamplingRate_48K:
    ZOOMSDK_AudioRawdataSamplingRate = 1;
#[doc = " \\enum AudioRawdataSamplingRate\n\\brief The sampling rate of raw audio data.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_AudioRawdataSamplingRate = ::std::os::raw::c_uint;
#[doc = " \\struct tagJoinParam4WithoutLogin\n\\brief The parameters of non-login user when joins the meeting.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagJoinParam4WithoutLogin {
    #[doc = "< Meeting number."]
    pub meetingNumber: UINT64,
    #[doc = "<Meeting vanity ID"]
    pub vanityID: *const zchar_t,
    #[doc = "<Username when logged in the meeting."]
    pub userName: *const zchar_t,
    #[doc = "<Meeting password."]
    pub psw: *const zchar_t,
    #[doc = "<app_privilege_token."]
    pub app_privilege_token: *const zchar_t,
    #[doc = "<ZOOM access token."]
    pub userZAK: *const zchar_t,
    #[doc = "<The customer key that need the app intergrated with sdk to specify. The SDK will set this value when the associated settings are turned on. The max length of customer_key is 35."]
    pub customer_key: *const zchar_t,
    #[doc = "<Webinar token."]
    pub webinarToken: *const zchar_t,
    #[doc = "<Turn off the video of not. True indicates to turn off. In addition, this flag is affected by meeting attributes."]
    pub isVideoOff: bool,
    #[doc = "<Turn off the audio or not. True indicates to turn off. In addition, this flag is affected by meeting attributes."]
    pub isAudioOff: bool,
    #[doc = "<Join token."]
    pub join_token: *const zchar_t,
    #[doc = "<Is my voice in the mixed audio raw data?"]
    pub isMyVoiceInMix: bool,
    #[doc = "<Is audio raw data stereo? The default is mono."]
    pub isAudioRawDataStereo: bool,
    #[doc = "<The sampling rate of the acquired raw audio data. The default is AudioRawdataSamplingRate_32K."]
    pub eAudioRawdataSamplingRate: ZOOMSDK_AudioRawdataSamplingRate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagJoinParam4WithoutLogin"]
        [::std::mem::size_of::<ZOOMSDK_tagJoinParam4WithoutLogin>() - 88usize];
    ["Alignment of ZOOMSDK_tagJoinParam4WithoutLogin"]
        [::std::mem::align_of::<ZOOMSDK_tagJoinParam4WithoutLogin>() - 8usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::meetingNumber"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, meetingNumber) - 0usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::vanityID"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, vanityID) - 8usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::userName"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, userName) - 16usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::psw"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, psw) - 24usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::app_privilege_token"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, app_privilege_token) - 32usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::userZAK"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, userZAK) - 40usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::customer_key"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, customer_key) - 48usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::webinarToken"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, webinarToken) - 56usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::isVideoOff"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, isVideoOff) - 64usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::isAudioOff"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, isAudioOff) - 65usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::join_token"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, join_token) - 72usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::isMyVoiceInMix"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, isMyVoiceInMix) - 80usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::isAudioRawDataStereo"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4WithoutLogin, isAudioRawDataStereo) - 81usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4WithoutLogin::eAudioRawdataSamplingRate"][::std::mem::offset_of!(
        ZOOMSDK_tagJoinParam4WithoutLogin,
        eAudioRawdataSamplingRate
    ) - 84usize];
};
#[doc = " \\struct tagJoinParam4WithoutLogin\n\\brief The parameters of non-login user when joins the meeting.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_JoinParam4WithoutLogin = ZOOMSDK_tagJoinParam4WithoutLogin;
#[doc = " \\struct tagJoinParam4NormalUser\n\\brief The parameter of ordinary logged-in user.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagJoinParam4NormalUser {
    #[doc = "<Meeting number."]
    pub meetingNumber: UINT64,
    #[doc = "<Meeting vanity ID."]
    pub vanityID: *const zchar_t,
    #[doc = "<Username when logged in the meeting."]
    pub userName: *const zchar_t,
    #[doc = "<Meeting password."]
    pub psw: *const zchar_t,
    #[doc = "<app_privilege_token."]
    pub app_privilege_token: *const zchar_t,
    #[doc = "<The customer key that need the app intergrated with sdk to specify. The SDK will set this value when the associated settings are turned on. The max length of customer_key is 35."]
    pub customer_key: *const zchar_t,
    #[doc = "<Webinar token."]
    pub webinarToken: *const zchar_t,
    #[doc = "<Turn off the video or not. True indicates to turn off. In addition, this flag is affected by meeting attributes."]
    pub isVideoOff: bool,
    #[doc = "<Turn off the audio or not. True indicates to turn off. In addition, this flag is affected by meeting attributes."]
    pub isAudioOff: bool,
    #[doc = "<Join token."]
    pub join_token: *const zchar_t,
    #[doc = "<Is my voice in the mixed audio raw data?"]
    pub isMyVoiceInMix: bool,
    #[doc = "<Is audio raw data stereo? The default is mono."]
    pub isAudioRawDataStereo: bool,
    #[doc = "<The sampling rate of the acquired raw audio data. The default is AudioRawdataSamplingRate_32K."]
    pub eAudioRawdataSamplingRate: ZOOMSDK_AudioRawdataSamplingRate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagJoinParam4NormalUser"]
        [::std::mem::size_of::<ZOOMSDK_tagJoinParam4NormalUser>() - 80usize];
    ["Alignment of ZOOMSDK_tagJoinParam4NormalUser"]
        [::std::mem::align_of::<ZOOMSDK_tagJoinParam4NormalUser>() - 8usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::meetingNumber"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, meetingNumber) - 0usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::vanityID"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, vanityID) - 8usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::userName"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, userName) - 16usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::psw"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, psw) - 24usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::app_privilege_token"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, app_privilege_token) - 32usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::customer_key"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, customer_key) - 40usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::webinarToken"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, webinarToken) - 48usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::isVideoOff"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, isVideoOff) - 56usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::isAudioOff"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, isAudioOff) - 57usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::join_token"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, join_token) - 64usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::isMyVoiceInMix"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, isMyVoiceInMix) - 72usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::isAudioRawDataStereo"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam4NormalUser, isAudioRawDataStereo) - 73usize];
    ["Offset of field: ZOOMSDK_tagJoinParam4NormalUser::eAudioRawdataSamplingRate"][::std::mem::offset_of!(
        ZOOMSDK_tagJoinParam4NormalUser,
        eAudioRawdataSamplingRate
    ) - 76usize];
};
#[doc = " \\struct tagJoinParam4NormalUser\n\\brief The parameter of ordinary logged-in user.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_JoinParam4NormalUser = ZOOMSDK_tagJoinParam4NormalUser;
#[doc = " \\struct tagJoinParam\n\\brief The way and the parameter of the users when join the meeting.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ZOOMSDK_tagJoinParam {
    #[doc = "<User type. For more details, see \\link SDKUserType \\endlink enum."]
    pub userType: ZOOMSDK_SDKUserType,
    pub param: ZOOMSDK_tagJoinParam__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ZOOMSDK_tagJoinParam__bindgen_ty_1 {
    #[doc = "<The parameter of ordinary user when joins the meeting."]
    pub normaluserJoin: ZOOMSDK_JoinParam4NormalUser,
    #[doc = "<The parameters of unlogged-in user when joins the meeting."]
    pub withoutloginuserJoin: ZOOMSDK_JoinParam4WithoutLogin,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagJoinParam__bindgen_ty_1"]
        [::std::mem::size_of::<ZOOMSDK_tagJoinParam__bindgen_ty_1>() - 88usize];
    ["Alignment of ZOOMSDK_tagJoinParam__bindgen_ty_1"]
        [::std::mem::align_of::<ZOOMSDK_tagJoinParam__bindgen_ty_1>() - 8usize];
    ["Offset of field: ZOOMSDK_tagJoinParam__bindgen_ty_1::normaluserJoin"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam__bindgen_ty_1, normaluserJoin) - 0usize];
    ["Offset of field: ZOOMSDK_tagJoinParam__bindgen_ty_1::withoutloginuserJoin"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam__bindgen_ty_1, withoutloginuserJoin) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagJoinParam"][::std::mem::size_of::<ZOOMSDK_tagJoinParam>() - 96usize];
    ["Alignment of ZOOMSDK_tagJoinParam"][::std::mem::align_of::<ZOOMSDK_tagJoinParam>() - 8usize];
    ["Offset of field: ZOOMSDK_tagJoinParam::userType"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam, userType) - 0usize];
    ["Offset of field: ZOOMSDK_tagJoinParam::param"]
        [::std::mem::offset_of!(ZOOMSDK_tagJoinParam, param) - 8usize];
};
#[doc = " \\struct tagJoinParam\n\\brief The way and the parameter of the users when join the meeting.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_JoinParam = ZOOMSDK_tagJoinParam;
#[doc = "<API user."]
pub const ZOOMSDK_ZoomUserType_ZoomUserType_APIUSER: ZOOMSDK_ZoomUserType = 0;
#[doc = "<User logged in with email."]
pub const ZOOMSDK_ZoomUserType_ZoomUserType_EMAIL_LOGIN: ZOOMSDK_ZoomUserType = 1;
#[doc = "<User logged in with Facebook."]
pub const ZOOMSDK_ZoomUserType_ZoomUserType_FACEBOOK: ZOOMSDK_ZoomUserType = 2;
#[doc = "<User logged in with Google."]
pub const ZOOMSDK_ZoomUserType_ZoomUserType_GoogleOAuth: ZOOMSDK_ZoomUserType = 3;
#[doc = "<User logged in with SSO."]
pub const ZOOMSDK_ZoomUserType_ZoomUserType_SSO: ZOOMSDK_ZoomUserType = 4;
#[doc = "<User of unknown type."]
pub const ZOOMSDK_ZoomUserType_ZoomUserType_Unknown: ZOOMSDK_ZoomUserType = 5;
#[doc = " \\enum ZoomUserType\n\\brief SDK user type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_ZoomUserType = ::std::os::raw::c_uint;
#[doc = " \\struct tagStartParam4WithoutLogin\n\\brief The parameter used by unlogged-in user when starts the meeting.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagStartParam4WithoutLogin {
    #[doc = "<ZOOM access token."]
    pub userZAK: *const zchar_t,
    #[doc = "<Username when logged in the meeting."]
    pub userName: *const zchar_t,
    #[doc = "<User type."]
    pub zoomuserType: ZOOMSDK_ZoomUserType,
    #[doc = "<Meeting number."]
    pub meetingNumber: UINT64,
    #[doc = "< Meeting vanity ID"]
    pub vanityID: *const zchar_t,
    #[doc = "<The customer key that need the app intergrated with sdk to specify. The SDK will set this value when the associated settings are turned on. The max length of customer_key is 35."]
    pub customer_key: *const zchar_t,
    #[doc = "<Turn off the video or not. True indicates to turn off. In addition, this flag is affected by meeting attributes."]
    pub isVideoOff: bool,
    #[doc = "<Turn off the audio or not. True indicates to turn off. In addition, this flag is affected by meeting attributes."]
    pub isAudioOff: bool,
    #[doc = "<Is my voice in the mixed audio raw data?"]
    pub isMyVoiceInMix: bool,
    #[doc = "<Is audio raw data stereo? The default is mono."]
    pub isAudioRawDataStereo: bool,
    #[doc = "<The sampling rate of the acquired raw audio data. The default is AudioRawdataSamplingRate_32K."]
    pub eAudioRawdataSamplingRate: ZOOMSDK_AudioRawdataSamplingRate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagStartParam4WithoutLogin"]
        [::std::mem::size_of::<ZOOMSDK_tagStartParam4WithoutLogin>() - 56usize];
    ["Alignment of ZOOMSDK_tagStartParam4WithoutLogin"]
        [::std::mem::align_of::<ZOOMSDK_tagStartParam4WithoutLogin>() - 8usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::userZAK"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, userZAK) - 0usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::userName"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, userName) - 8usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::zoomuserType"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, zoomuserType) - 16usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::meetingNumber"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, meetingNumber) - 24usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::vanityID"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, vanityID) - 32usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::customer_key"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, customer_key) - 40usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::isVideoOff"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, isVideoOff) - 48usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::isAudioOff"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, isAudioOff) - 49usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::isMyVoiceInMix"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4WithoutLogin, isMyVoiceInMix) - 50usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::isAudioRawDataStereo"][::std::mem::offset_of!(
        ZOOMSDK_tagStartParam4WithoutLogin,
        isAudioRawDataStereo
    ) - 51usize];
    ["Offset of field: ZOOMSDK_tagStartParam4WithoutLogin::eAudioRawdataSamplingRate"][::std::mem::offset_of!(
        ZOOMSDK_tagStartParam4WithoutLogin,
        eAudioRawdataSamplingRate
    ) - 52usize];
};
#[doc = " \\struct tagStartParam4WithoutLogin\n\\brief The parameter used by unlogged-in user when starts the meeting.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_StartParam4WithoutLogin = ZOOMSDK_tagStartParam4WithoutLogin;
#[doc = " \\struct tagStartParam4NormalUser\n\\brief The parameter of ordinary user when starts meeting.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagStartParam4NormalUser {
    #[doc = "<Meeting number."]
    pub meetingNumber: UINT64,
    #[doc = "<Meeting vanity ID. Generate a ZOOM access token via REST API."]
    pub vanityID: *const zchar_t,
    #[doc = "<The customer key that need the app intergrated with sdk to specify. The SDK will set this value when the associated settings are turned on. The max length of customer_key is 35."]
    pub customer_key: *const zchar_t,
    #[doc = "<Turn off video or not. True indicates to turn off. In addition, this flag is affected by meeting attributes."]
    pub isVideoOff: bool,
    #[doc = "<Turn off audio or not. True indicates to turn off. In addition, this flag is affected by meeting attributes."]
    pub isAudioOff: bool,
    #[doc = "<Is my voice in the mixed audio raw data?"]
    pub isMyVoiceInMix: bool,
    #[doc = "<Is audio raw data stereo? The default is mono."]
    pub isAudioRawDataStereo: bool,
    #[doc = "<The sampling rate of the acquired raw audio data. The default is AudioRawdataSamplingRate_32K."]
    pub eAudioRawdataSamplingRate: ZOOMSDK_AudioRawdataSamplingRate,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagStartParam4NormalUser"]
        [::std::mem::size_of::<ZOOMSDK_tagStartParam4NormalUser>() - 32usize];
    ["Alignment of ZOOMSDK_tagStartParam4NormalUser"]
        [::std::mem::align_of::<ZOOMSDK_tagStartParam4NormalUser>() - 8usize];
    ["Offset of field: ZOOMSDK_tagStartParam4NormalUser::meetingNumber"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4NormalUser, meetingNumber) - 0usize];
    ["Offset of field: ZOOMSDK_tagStartParam4NormalUser::vanityID"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4NormalUser, vanityID) - 8usize];
    ["Offset of field: ZOOMSDK_tagStartParam4NormalUser::customer_key"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4NormalUser, customer_key) - 16usize];
    ["Offset of field: ZOOMSDK_tagStartParam4NormalUser::isVideoOff"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4NormalUser, isVideoOff) - 24usize];
    ["Offset of field: ZOOMSDK_tagStartParam4NormalUser::isAudioOff"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4NormalUser, isAudioOff) - 25usize];
    ["Offset of field: ZOOMSDK_tagStartParam4NormalUser::isMyVoiceInMix"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4NormalUser, isMyVoiceInMix) - 26usize];
    ["Offset of field: ZOOMSDK_tagStartParam4NormalUser::isAudioRawDataStereo"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam4NormalUser, isAudioRawDataStereo) - 27usize];
    ["Offset of field: ZOOMSDK_tagStartParam4NormalUser::eAudioRawdataSamplingRate"][::std::mem::offset_of!(
        ZOOMSDK_tagStartParam4NormalUser,
        eAudioRawdataSamplingRate
    ) - 28usize];
};
#[doc = " \\struct tagStartParam4NormalUser\n\\brief The parameter of ordinary user when starts meeting.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_StartParam4NormalUser = ZOOMSDK_tagStartParam4NormalUser;
#[doc = " \\struct tagJoinParam\n\\brief The way and the parameter for meeting start.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ZOOMSDK_tagStartParam {
    #[doc = "<User type."]
    pub userType: ZOOMSDK_SDKUserType,
    pub inviteContactId: *const zchar_t,
    pub param: ZOOMSDK_tagStartParam__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ZOOMSDK_tagStartParam__bindgen_ty_1 {
    #[doc = "<The parameter for ordinary user when starts the meeting."]
    pub normaluserStart: ZOOMSDK_StartParam4NormalUser,
    #[doc = "<The parameter for unlogged-in user when starts the meeting."]
    pub withoutloginStart: ZOOMSDK_StartParam4WithoutLogin,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagStartParam__bindgen_ty_1"]
        [::std::mem::size_of::<ZOOMSDK_tagStartParam__bindgen_ty_1>() - 56usize];
    ["Alignment of ZOOMSDK_tagStartParam__bindgen_ty_1"]
        [::std::mem::align_of::<ZOOMSDK_tagStartParam__bindgen_ty_1>() - 8usize];
    ["Offset of field: ZOOMSDK_tagStartParam__bindgen_ty_1::normaluserStart"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam__bindgen_ty_1, normaluserStart) - 0usize];
    ["Offset of field: ZOOMSDK_tagStartParam__bindgen_ty_1::withoutloginStart"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam__bindgen_ty_1, withoutloginStart) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagStartParam"][::std::mem::size_of::<ZOOMSDK_tagStartParam>() - 72usize];
    ["Alignment of ZOOMSDK_tagStartParam"]
        [::std::mem::align_of::<ZOOMSDK_tagStartParam>() - 8usize];
    ["Offset of field: ZOOMSDK_tagStartParam::userType"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam, userType) - 0usize];
    ["Offset of field: ZOOMSDK_tagStartParam::inviteContactId"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam, inviteContactId) - 8usize];
    ["Offset of field: ZOOMSDK_tagStartParam::param"]
        [::std::mem::offset_of!(ZOOMSDK_tagStartParam, param) - 16usize];
};
#[doc = " \\struct tagJoinParam\n\\brief The way and the parameter for meeting start.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_StartParam = ZOOMSDK_tagStartParam;
#[doc = "<Unknown connection status"]
pub const ZOOMSDK_ConnectionQuality_Conn_Quality_Unknown: ZOOMSDK_ConnectionQuality = 0;
#[doc = "<The connection quality is very poor."]
pub const ZOOMSDK_ConnectionQuality_Conn_Quality_Very_Bad: ZOOMSDK_ConnectionQuality = 1;
#[doc = "<The connection quality is poor."]
pub const ZOOMSDK_ConnectionQuality_Conn_Quality_Bad: ZOOMSDK_ConnectionQuality = 2;
#[doc = "<The connection quality is not good."]
pub const ZOOMSDK_ConnectionQuality_Conn_Quality_Not_Good: ZOOMSDK_ConnectionQuality = 3;
#[doc = "<The connection quality is normal."]
pub const ZOOMSDK_ConnectionQuality_Conn_Quality_Normal: ZOOMSDK_ConnectionQuality = 4;
#[doc = "<The connection quality is good."]
pub const ZOOMSDK_ConnectionQuality_Conn_Quality_Good: ZOOMSDK_ConnectionQuality = 5;
#[doc = "<The connection quality is excellent."]
pub const ZOOMSDK_ConnectionQuality_Conn_Quality_Excellent: ZOOMSDK_ConnectionQuality = 6;
#[doc = " \\enum ConnectionQuality\n\\brief Connection quality.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_ConnectionQuality = ::std::os::raw::c_uint;
pub const ZOOMSDK_InMeetingSupportAudioType_AUDIO_TYPE_NONE: ZOOMSDK_InMeetingSupportAudioType = 0;
pub const ZOOMSDK_InMeetingSupportAudioType_AUDIO_TYPE_VOIP: ZOOMSDK_InMeetingSupportAudioType = 1;
pub const ZOOMSDK_InMeetingSupportAudioType_AUDIO_TYPE_TELEPHONY:
    ZOOMSDK_InMeetingSupportAudioType = 2;
#[doc = " \\enum InMeetingSupportAudioType\n\\brief meeting supported audio type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_InMeetingSupportAudioType = ::std::os::raw::c_uint;
#[doc = "<Disconnection."]
pub const ZOOMSDK_MeetingConnType_Meeting_Conn_None: ZOOMSDK_MeetingConnType = 0;
#[doc = "<Normal connection."]
pub const ZOOMSDK_MeetingConnType_Meeting_Conn_Normal: ZOOMSDK_MeetingConnType = 1;
#[doc = "<Failure and reconnection."]
pub const ZOOMSDK_MeetingConnType_Meeting_Conn_FailOver: ZOOMSDK_MeetingConnType = 2;
#[doc = " \\enum MeetingConnType\n\\brief Meeting connection type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_MeetingConnType = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IMeetingInfo__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting information Interface.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMeetingInfo {
    pub vtable_: *const ZOOMSDK_IMeetingInfo__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingInfo"][::std::mem::size_of::<ZOOMSDK_IMeetingInfo>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingInfo"][::std::mem::align_of::<ZOOMSDK_IMeetingInfo>() - 8usize];
};
#[doc = " \\struct tagMeetingParameter\n\\brief Meeting parameter.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_tagMeetingParameter {
    #[doc = "<Meeting type."]
    pub meeting_type: ZOOMSDK_MeetingType,
    #[doc = "<View only or not. True indicates to view only."]
    pub is_view_only: bool,
    #[doc = "<Auto local recording or not. True indicates to auto local recording."]
    pub is_auto_recording_local: bool,
    #[doc = "<Auto cloud recording or not. True indicates to auto cloud recording."]
    pub is_auto_recording_cloud: bool,
    #[doc = "<Meeting number."]
    pub meeting_number: UINT64,
    #[doc = "<Meeting topic."]
    pub meeting_topic: *const zchar_t,
    #[doc = "<Meeting host."]
    pub meeting_host: *const zchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagMeetingParameter"]
        [::std::mem::size_of::<ZOOMSDK_tagMeetingParameter>() - 32usize];
    ["Alignment of ZOOMSDK_tagMeetingParameter"]
        [::std::mem::align_of::<ZOOMSDK_tagMeetingParameter>() - 8usize];
    ["Offset of field: ZOOMSDK_tagMeetingParameter::meeting_type"]
        [::std::mem::offset_of!(ZOOMSDK_tagMeetingParameter, meeting_type) - 0usize];
    ["Offset of field: ZOOMSDK_tagMeetingParameter::is_view_only"]
        [::std::mem::offset_of!(ZOOMSDK_tagMeetingParameter, is_view_only) - 4usize];
    ["Offset of field: ZOOMSDK_tagMeetingParameter::is_auto_recording_local"]
        [::std::mem::offset_of!(ZOOMSDK_tagMeetingParameter, is_auto_recording_local) - 5usize];
    ["Offset of field: ZOOMSDK_tagMeetingParameter::is_auto_recording_cloud"]
        [::std::mem::offset_of!(ZOOMSDK_tagMeetingParameter, is_auto_recording_cloud) - 6usize];
    ["Offset of field: ZOOMSDK_tagMeetingParameter::meeting_number"]
        [::std::mem::offset_of!(ZOOMSDK_tagMeetingParameter, meeting_number) - 8usize];
    ["Offset of field: ZOOMSDK_tagMeetingParameter::meeting_topic"]
        [::std::mem::offset_of!(ZOOMSDK_tagMeetingParameter, meeting_topic) - 16usize];
    ["Offset of field: ZOOMSDK_tagMeetingParameter::meeting_host"]
        [::std::mem::offset_of!(ZOOMSDK_tagMeetingParameter, meeting_host) - 24usize];
};
#[doc = " \\struct tagMeetingParameter\n\\brief Meeting parameter.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_MeetingParameter = ZOOMSDK_tagMeetingParameter;
#[doc = "<No warning."]
pub const ZOOMSDK_StatisticsWarningType_Statistics_Warning_None: ZOOMSDK_StatisticsWarningType = 0;
#[doc = "<The network connection quality is bad."]
pub const ZOOMSDK_StatisticsWarningType_Statistics_Warning_Network_Quality_Bad:
    ZOOMSDK_StatisticsWarningType = 1;
#[doc = "<The system is busy."]
pub const ZOOMSDK_StatisticsWarningType_Statistics_Warning_Busy_System:
    ZOOMSDK_StatisticsWarningType = 2;
#[doc = " \\enum StatisticsWarningType\n\\brief Meeting statistics warning type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_StatisticsWarningType = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IMeetingServiceEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting service callback event.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMeetingServiceEvent {
    pub vtable_: *const ZOOMSDK_IMeetingServiceEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingServiceEvent"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingServiceEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingServiceEvent"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingServiceEvent>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingConfiguration {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingBOController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingShareController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingWaitingRoomController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingWebinarController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingRawArchivingController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingReminderController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingWhiteboardController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingSmartSummaryController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingEncryptionController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingRemoteSupportController {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingAICompanionController {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct ZOOMSDK_IMeetingService__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting Service Interface\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingService {
    pub vtable_: *const ZOOMSDK_IMeetingService__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingService"][::std::mem::size_of::<ZOOMSDK_IMeetingService>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingService"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingService>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_ICameraInfo__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Camera device information interface.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_ICameraInfo {
    pub vtable_: *const ZOOMSDK_ICameraInfo__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ICameraInfo"][::std::mem::size_of::<ZOOMSDK_ICameraInfo>() - 8usize];
    ["Alignment of ZOOMSDK_ICameraInfo"][::std::mem::align_of::<ZOOMSDK_ICameraInfo>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMicInfo__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Microphone device information interface.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMicInfo {
    pub vtable_: *const ZOOMSDK_IMicInfo__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMicInfo"][::std::mem::size_of::<ZOOMSDK_IMicInfo>() - 8usize];
    ["Alignment of ZOOMSDK_IMicInfo"][::std::mem::align_of::<ZOOMSDK_IMicInfo>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_ISpeakerInfo__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Audio speaker device information interface.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_ISpeakerInfo {
    pub vtable_: *const ZOOMSDK_ISpeakerInfo__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ISpeakerInfo"][::std::mem::size_of::<ZOOMSDK_ISpeakerInfo>() - 8usize];
    ["Alignment of ZOOMSDK_ISpeakerInfo"][::std::mem::align_of::<ZOOMSDK_ISpeakerInfo>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IRingSpeakerInfo__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Ring speaker device information interface.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IRingSpeakerInfo {
    pub vtable_: *const ZOOMSDK_IRingSpeakerInfo__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRingSpeakerInfo"]
        [::std::mem::size_of::<ZOOMSDK_IRingSpeakerInfo>() - 8usize];
    ["Alignment of ZOOMSDK_IRingSpeakerInfo"]
        [::std::mem::align_of::<ZOOMSDK_IRingSpeakerInfo>() - 8usize];
};
#[doc = "<The feature is not enabled."]
pub const ZOOMSDK_LimitFPSValue_limitfps_Not_Enable: ZOOMSDK_LimitFPSValue = 0;
#[doc = "<1 frame per second."]
pub const ZOOMSDK_LimitFPSValue_limitfps_1_frame: ZOOMSDK_LimitFPSValue = 1;
#[doc = "<2 frames per second."]
pub const ZOOMSDK_LimitFPSValue_limitfps_2_frame: ZOOMSDK_LimitFPSValue = 2;
#[doc = "<4 frames per second."]
pub const ZOOMSDK_LimitFPSValue_limitfps_4_frame: ZOOMSDK_LimitFPSValue = 3;
#[doc = "<6 frames per second."]
pub const ZOOMSDK_LimitFPSValue_limitfps_6_frame: ZOOMSDK_LimitFPSValue = 4;
#[doc = "<8 frames per second."]
pub const ZOOMSDK_LimitFPSValue_limitfps_8_frame: ZOOMSDK_LimitFPSValue = 5;
#[doc = "<10 frames per second."]
pub const ZOOMSDK_LimitFPSValue_limitfps_10_frame: ZOOMSDK_LimitFPSValue = 6;
#[doc = "<15 frames per second."]
pub const ZOOMSDK_LimitFPSValue_limitfps_15_frame: ZOOMSDK_LimitFPSValue = 7;
#[doc = " \\enum LimitFPSValue\n\\brief Specify the values of available limit fps.\nHere are more detailed enum descriptions."]
pub type ZOOMSDK_LimitFPSValue = ::std::os::raw::c_uint;
pub const ZOOMSDK_Suppress_Background_Noise_Level_Suppress_BGNoise_Level_None:
    ZOOMSDK_Suppress_Background_Noise_Level = 0;
pub const ZOOMSDK_Suppress_Background_Noise_Level_Suppress_BGNoise_Level_Auto:
    ZOOMSDK_Suppress_Background_Noise_Level = 1;
pub const ZOOMSDK_Suppress_Background_Noise_Level_Suppress_BGNoise_Level_Low:
    ZOOMSDK_Suppress_Background_Noise_Level = 2;
pub const ZOOMSDK_Suppress_Background_Noise_Level_Suppress_BGNoise_Level_Medium:
    ZOOMSDK_Suppress_Background_Noise_Level = 3;
pub const ZOOMSDK_Suppress_Background_Noise_Level_Suppress_BGNoise_Level_High:
    ZOOMSDK_Suppress_Background_Noise_Level = 4;
pub type ZOOMSDK_Suppress_Background_Noise_Level = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IGeneralSettingContext__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief General setting interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IGeneralSettingContext {
    pub vtable_: *const ZOOMSDK_IGeneralSettingContext__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IGeneralSettingContext"]
        [::std::mem::size_of::<ZOOMSDK_IGeneralSettingContext>() - 8usize];
    ["Alignment of ZOOMSDK_IGeneralSettingContext"]
        [::std::mem::align_of::<ZOOMSDK_IGeneralSettingContext>() - 8usize];
};
pub const ZOOMSDK_VIDEO_LIGHT_ADAPTION_TYPE_Light_Adaption_None: ZOOMSDK_VIDEO_LIGHT_ADAPTION_TYPE =
    0;
pub const ZOOMSDK_VIDEO_LIGHT_ADAPTION_TYPE_Light_Adaption_Auto: ZOOMSDK_VIDEO_LIGHT_ADAPTION_TYPE =
    1;
pub const ZOOMSDK_VIDEO_LIGHT_ADAPTION_TYPE_Light_Adaption_Manual:
    ZOOMSDK_VIDEO_LIGHT_ADAPTION_TYPE = 2;
pub type ZOOMSDK_VIDEO_LIGHT_ADAPTION_TYPE = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IVideoSettingContextEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Video setting context callback event."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IVideoSettingContextEvent {
    pub vtable_: *const ZOOMSDK_IVideoSettingContextEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IVideoSettingContextEvent"]
        [::std::mem::size_of::<ZOOMSDK_IVideoSettingContextEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IVideoSettingContextEvent"]
        [::std::mem::align_of::<ZOOMSDK_IVideoSettingContextEvent>() - 8usize];
};
#[doc = "<No use of the auto-framing"]
pub const ZOOMSDK_AutoFramingMode_AutoFramingMode_none: ZOOMSDK_AutoFramingMode = 0;
#[doc = "<will use the center point of the video frame as the center for zoom-in"]
pub const ZOOMSDK_AutoFramingMode_AutoFramingMode_center_coordinates: ZOOMSDK_AutoFramingMode = 1;
#[doc = "<will use the detected face in the video frame as the center to zoom-in"]
pub const ZOOMSDK_AutoFramingMode_AutoFramingMode_face_recognition: ZOOMSDK_AutoFramingMode = 2;
pub type ZOOMSDK_AutoFramingMode = ::std::os::raw::c_uint;
#[doc = "<No use of the fail strategy"]
pub const ZOOMSDK_FaceRecognitionFailStrategy_FaceRecognitionFailStrategy_none:
    ZOOMSDK_FaceRecognitionFailStrategy = 0;
#[doc = "<After face recognition fail, do nothing util face recognition success again"]
pub const ZOOMSDK_FaceRecognitionFailStrategy_FaceRecognitionFailStrategy_remain:
    ZOOMSDK_FaceRecognitionFailStrategy = 1;
#[doc = "<After face recognition fail, will use center point of the video frame as the center for zoom-in"]
pub const ZOOMSDK_FaceRecognitionFailStrategy_FaceRecognitionFailStrategy_using_center_coordinates : ZOOMSDK_FaceRecognitionFailStrategy = 2 ;
#[doc = "<After face recognition fail, will use original video"]
pub const ZOOMSDK_FaceRecognitionFailStrategy_FaceRecognitionFailStrategy_using_original_video:
    ZOOMSDK_FaceRecognitionFailStrategy = 3;
pub type ZOOMSDK_FaceRecognitionFailStrategy = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_AutoFramingParameter {
    #[doc = "<The zoom in ratio of auto-framing, valid range of values: 1~10(when mode is AutoFramingMode_center_coordinates), 0.1~10(when mode is AutoFramingMode_face_recognition)"]
    pub ratio: f32,
    #[doc = "<Only mode is AutoFramingMode_face_recognition, the param is valid"]
    pub fail_Strategy: ZOOMSDK_FaceRecognitionFailStrategy,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_AutoFramingParameter"]
        [::std::mem::size_of::<ZOOMSDK_AutoFramingParameter>() - 8usize];
    ["Alignment of ZOOMSDK_AutoFramingParameter"]
        [::std::mem::align_of::<ZOOMSDK_AutoFramingParameter>() - 4usize];
    ["Offset of field: ZOOMSDK_AutoFramingParameter::ratio"]
        [::std::mem::offset_of!(ZOOMSDK_AutoFramingParameter, ratio) - 0usize];
    ["Offset of field: ZOOMSDK_AutoFramingParameter::fail_Strategy"]
        [::std::mem::offset_of!(ZOOMSDK_AutoFramingParameter, fail_Strategy) - 4usize];
};
#[repr(C)]
pub struct ZOOMSDK_IVideoSettingContext__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Video setting interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IVideoSettingContext {
    pub vtable_: *const ZOOMSDK_IVideoSettingContext__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IVideoSettingContext"]
        [::std::mem::size_of::<ZOOMSDK_IVideoSettingContext>() - 8usize];
    ["Alignment of ZOOMSDK_IVideoSettingContext"]
        [::std::mem::align_of::<ZOOMSDK_IVideoSettingContext>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IAudioSettingContextEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Audio setting context callback event."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IAudioSettingContextEvent {
    pub vtable_: *const ZOOMSDK_IAudioSettingContextEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IAudioSettingContextEvent"]
        [::std::mem::size_of::<ZOOMSDK_IAudioSettingContextEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IAudioSettingContextEvent"]
        [::std::mem::align_of::<ZOOMSDK_IAudioSettingContextEvent>() - 8usize];
};
pub const ZOOMSDK_SDK_AUDIO_DEVICE_RAW_MODE_TYPE_SDK_AUDIO_DEVICE_RAW_MODE_DEFAULT:
    ZOOMSDK_SDK_AUDIO_DEVICE_RAW_MODE_TYPE = 0;
pub const ZOOMSDK_SDK_AUDIO_DEVICE_RAW_MODE_TYPE_SDK_AUDIO_DEVICE_RAW_MODE_ON:
    ZOOMSDK_SDK_AUDIO_DEVICE_RAW_MODE_TYPE = 1;
pub const ZOOMSDK_SDK_AUDIO_DEVICE_RAW_MODE_TYPE_SDK_AUDIO_DEVICE_RAW_MODE_OFF:
    ZOOMSDK_SDK_AUDIO_DEVICE_RAW_MODE_TYPE = 2;
pub type ZOOMSDK_SDK_AUDIO_DEVICE_RAW_MODE_TYPE = ::std::os::raw::c_uint;
pub const ZOOMSDK_SDK_ECHO_CANCELLATION_LEVEL_SDK_ECHO_CANCELLATION_DEFAULT:
    ZOOMSDK_SDK_ECHO_CANCELLATION_LEVEL = 0;
pub const ZOOMSDK_SDK_ECHO_CANCELLATION_LEVEL_SDK_ECHO_CANCELLATION_AGGRESSIVE:
    ZOOMSDK_SDK_ECHO_CANCELLATION_LEVEL = 1;
pub type ZOOMSDK_SDK_ECHO_CANCELLATION_LEVEL = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IAudioSettingContext__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Audio setting interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IAudioSettingContext {
    pub vtable_: *const ZOOMSDK_IAudioSettingContext__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IAudioSettingContext"]
        [::std::mem::size_of::<ZOOMSDK_IAudioSettingContext>() - 8usize];
    ["Alignment of ZOOMSDK_IAudioSettingContext"]
        [::std::mem::align_of::<ZOOMSDK_IAudioSettingContext>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IRecordingSettingContextEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Recording setting context callback event."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IRecordingSettingContextEvent {
    pub vtable_: *const ZOOMSDK_IRecordingSettingContextEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRecordingSettingContextEvent"]
        [::std::mem::size_of::<ZOOMSDK_IRecordingSettingContextEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IRecordingSettingContextEvent"]
        [::std::mem::align_of::<ZOOMSDK_IRecordingSettingContextEvent>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IRecordingSettingContext__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Recording setting interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IRecordingSettingContext {
    pub vtable_: *const ZOOMSDK_IRecordingSettingContext__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRecordingSettingContext"]
        [::std::mem::size_of::<ZOOMSDK_IRecordingSettingContext>() - 8usize];
    ["Alignment of ZOOMSDK_IRecordingSettingContext"]
        [::std::mem::align_of::<ZOOMSDK_IRecordingSettingContext>() - 8usize];
};
#[doc = "<Wired LAN"]
pub const ZOOMSDK_SettingsNetWorkType_SETTINGS_NETWORK_WIRED: ZOOMSDK_SettingsNetWorkType = 0;
#[doc = "<WIFI"]
pub const ZOOMSDK_SettingsNetWorkType_SETTINGS_NETWORK_WIFI: ZOOMSDK_SettingsNetWorkType = 1;
#[doc = "<PPP"]
pub const ZOOMSDK_SettingsNetWorkType_SETTINGS_NETWORK_PPP: ZOOMSDK_SettingsNetWorkType = 2;
#[doc = "<3G"]
pub const ZOOMSDK_SettingsNetWorkType_SETTINGS_NETWORK_3G: ZOOMSDK_SettingsNetWorkType = 3;
#[doc = "<Others"]
pub const ZOOMSDK_SettingsNetWorkType_SETTINGS_NETWORK_OTHERS: ZOOMSDK_SettingsNetWorkType = 4;
#[doc = "<Unknown network."]
pub const ZOOMSDK_SettingsNetWorkType_SETTINGS_NETWORK_UNKNOWN: ZOOMSDK_SettingsNetWorkType = -1;
#[doc = " \\enum SettingsNetWorkType\n\\brief Notify network type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_SettingsNetWorkType = ::std::os::raw::c_int;
#[doc = "<Cloud connection."]
pub const ZOOMSDK_SettingConnectionType_SETTINGS_CONNECTION_TYPE_CLOUD:
    ZOOMSDK_SettingConnectionType = 0;
#[doc = "<Direct connection."]
pub const ZOOMSDK_SettingConnectionType_SETTINGS_CONNECTION_TYPE_DIRECT:
    ZOOMSDK_SettingConnectionType = 1;
#[doc = "<Unknown connection."]
pub const ZOOMSDK_SettingConnectionType_SETTINGS_CONNECTION_TYPE_UNKNOWN:
    ZOOMSDK_SettingConnectionType = -1;
#[doc = " \\enum SettingConnectionType\n\\brief Notify connection type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_SettingConnectionType = ::std::os::raw::c_int;
#[doc = " \\struct tagOverallStatisticInfo\n\\brief Notify overall statistic information.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagOverallStatisticInfo {
    #[doc = "<Network type."]
    pub net_work_type_: ZOOMSDK_SettingsNetWorkType,
    #[doc = "<Connection type"]
    pub connection_type_: ZOOMSDK_SettingConnectionType,
    #[doc = "<Proxy address."]
    pub proxy_addr_: *const zchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagOverallStatisticInfo"]
        [::std::mem::size_of::<ZOOMSDK_tagOverallStatisticInfo>() - 16usize];
    ["Alignment of ZOOMSDK_tagOverallStatisticInfo"]
        [::std::mem::align_of::<ZOOMSDK_tagOverallStatisticInfo>() - 8usize];
    ["Offset of field: ZOOMSDK_tagOverallStatisticInfo::net_work_type_"]
        [::std::mem::offset_of!(ZOOMSDK_tagOverallStatisticInfo, net_work_type_) - 0usize];
    ["Offset of field: ZOOMSDK_tagOverallStatisticInfo::connection_type_"]
        [::std::mem::offset_of!(ZOOMSDK_tagOverallStatisticInfo, connection_type_) - 4usize];
    ["Offset of field: ZOOMSDK_tagOverallStatisticInfo::proxy_addr_"]
        [::std::mem::offset_of!(ZOOMSDK_tagOverallStatisticInfo, proxy_addr_) - 8usize];
};
#[doc = " \\struct tagOverallStatisticInfo\n\\brief Notify overall statistic information.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_OverallStatisticInfo = ZOOMSDK_tagOverallStatisticInfo;
#[doc = " \\struct tagAudioSessionStatisticInfo\n\\brief Notify the audio status information.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagAudioSessionStatisticInfo {
    #[doc = "<Sending frequency, unit: KHz."]
    pub frequency_send_: ::std::os::raw::c_int,
    #[doc = "<Receiving frequency, unit: KHz."]
    pub frequency_recv_: ::std::os::raw::c_int,
    #[doc = "<Sending latency, unit: ms."]
    pub latency_send_: ::std::os::raw::c_int,
    #[doc = "<Receiving latency, unit: ms."]
    pub latency_recv_: ::std::os::raw::c_int,
    #[doc = "<Sending jitter, unit: ms."]
    pub jitter_send_: ::std::os::raw::c_int,
    #[doc = "<Receiving jitter, unit: ms."]
    pub jitter_recv_: ::std::os::raw::c_int,
    #[doc = "<Sending packet loss, unit: %."]
    pub packetloss_send_: f32,
    #[doc = "<Receiving packet loss, unit: %."]
    pub packetloss_recv_: f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagAudioSessionStatisticInfo"]
        [::std::mem::size_of::<ZOOMSDK_tagAudioSessionStatisticInfo>() - 32usize];
    ["Alignment of ZOOMSDK_tagAudioSessionStatisticInfo"]
        [::std::mem::align_of::<ZOOMSDK_tagAudioSessionStatisticInfo>() - 4usize];
    ["Offset of field: ZOOMSDK_tagAudioSessionStatisticInfo::frequency_send_"]
        [::std::mem::offset_of!(ZOOMSDK_tagAudioSessionStatisticInfo, frequency_send_) - 0usize];
    ["Offset of field: ZOOMSDK_tagAudioSessionStatisticInfo::frequency_recv_"]
        [::std::mem::offset_of!(ZOOMSDK_tagAudioSessionStatisticInfo, frequency_recv_) - 4usize];
    ["Offset of field: ZOOMSDK_tagAudioSessionStatisticInfo::latency_send_"]
        [::std::mem::offset_of!(ZOOMSDK_tagAudioSessionStatisticInfo, latency_send_) - 8usize];
    ["Offset of field: ZOOMSDK_tagAudioSessionStatisticInfo::latency_recv_"]
        [::std::mem::offset_of!(ZOOMSDK_tagAudioSessionStatisticInfo, latency_recv_) - 12usize];
    ["Offset of field: ZOOMSDK_tagAudioSessionStatisticInfo::jitter_send_"]
        [::std::mem::offset_of!(ZOOMSDK_tagAudioSessionStatisticInfo, jitter_send_) - 16usize];
    ["Offset of field: ZOOMSDK_tagAudioSessionStatisticInfo::jitter_recv_"]
        [::std::mem::offset_of!(ZOOMSDK_tagAudioSessionStatisticInfo, jitter_recv_) - 20usize];
    ["Offset of field: ZOOMSDK_tagAudioSessionStatisticInfo::packetloss_send_"]
        [::std::mem::offset_of!(ZOOMSDK_tagAudioSessionStatisticInfo, packetloss_send_) - 24usize];
    ["Offset of field: ZOOMSDK_tagAudioSessionStatisticInfo::packetloss_recv_"]
        [::std::mem::offset_of!(ZOOMSDK_tagAudioSessionStatisticInfo, packetloss_recv_) - 28usize];
};
#[doc = " \\struct tagAudioSessionStatisticInfo\n\\brief Notify the audio status information.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_AudioSessionStatisticInfo = ZOOMSDK_tagAudioSessionStatisticInfo;
#[doc = " \\struct tagASVSessionStatisticInfo\n\\brief Notify video status information.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagASVSessionStatisticInfo {
    #[doc = "<Sending latency, unit: ms."]
    pub latency_send_: ::std::os::raw::c_int,
    #[doc = "<Receiving latency, unit: ms."]
    pub latency_recv_: ::std::os::raw::c_int,
    #[doc = "<Sending jitter, unit: ms."]
    pub jitter_send_: ::std::os::raw::c_int,
    #[doc = "<Receiving jitter, unit: ms."]
    pub jitter_recv_: ::std::os::raw::c_int,
    #[doc = "<Sending max packet loss, unit: %."]
    pub packetloss_send_max_: f32,
    #[doc = "<Receiving max packet loss, unit: %."]
    pub packetloss_recv_max_: f32,
    #[doc = "<Sending average packet loss, unit: %."]
    pub packetloss_send_avg_: f32,
    #[doc = "<Receiving average packet loss, unit: %."]
    pub packetloss_recv_avg_: f32,
    #[doc = "<HIWORD->height, LOWORD->width."]
    pub resolution_send_: ::std::os::raw::c_int,
    #[doc = "<HIWORD->height, LOWORD->width."]
    pub resolution_recv_: ::std::os::raw::c_int,
    #[doc = "<Frame per second sending."]
    pub fps_send_: ::std::os::raw::c_int,
    #[doc = "<Frame per second receiving."]
    pub fps_recv_: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagASVSessionStatisticInfo"]
        [::std::mem::size_of::<ZOOMSDK_tagASVSessionStatisticInfo>() - 48usize];
    ["Alignment of ZOOMSDK_tagASVSessionStatisticInfo"]
        [::std::mem::align_of::<ZOOMSDK_tagASVSessionStatisticInfo>() - 4usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::latency_send_"]
        [::std::mem::offset_of!(ZOOMSDK_tagASVSessionStatisticInfo, latency_send_) - 0usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::latency_recv_"]
        [::std::mem::offset_of!(ZOOMSDK_tagASVSessionStatisticInfo, latency_recv_) - 4usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::jitter_send_"]
        [::std::mem::offset_of!(ZOOMSDK_tagASVSessionStatisticInfo, jitter_send_) - 8usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::jitter_recv_"]
        [::std::mem::offset_of!(ZOOMSDK_tagASVSessionStatisticInfo, jitter_recv_) - 12usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::packetloss_send_max_"][::std::mem::offset_of!(
        ZOOMSDK_tagASVSessionStatisticInfo,
        packetloss_send_max_
    ) - 16usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::packetloss_recv_max_"][::std::mem::offset_of!(
        ZOOMSDK_tagASVSessionStatisticInfo,
        packetloss_recv_max_
    ) - 20usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::packetloss_send_avg_"][::std::mem::offset_of!(
        ZOOMSDK_tagASVSessionStatisticInfo,
        packetloss_send_avg_
    ) - 24usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::packetloss_recv_avg_"][::std::mem::offset_of!(
        ZOOMSDK_tagASVSessionStatisticInfo,
        packetloss_recv_avg_
    ) - 28usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::resolution_send_"]
        [::std::mem::offset_of!(ZOOMSDK_tagASVSessionStatisticInfo, resolution_send_) - 32usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::resolution_recv_"]
        [::std::mem::offset_of!(ZOOMSDK_tagASVSessionStatisticInfo, resolution_recv_) - 36usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::fps_send_"]
        [::std::mem::offset_of!(ZOOMSDK_tagASVSessionStatisticInfo, fps_send_) - 40usize];
    ["Offset of field: ZOOMSDK_tagASVSessionStatisticInfo::fps_recv_"]
        [::std::mem::offset_of!(ZOOMSDK_tagASVSessionStatisticInfo, fps_recv_) - 44usize];
};
#[doc = " \\struct tagASVSessionStatisticInfo\n\\brief Notify video status information.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_ASVSessionStatisticInfo = ZOOMSDK_tagASVSessionStatisticInfo;
#[repr(C)]
pub struct ZOOMSDK_IStatisticSettingContext__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Statistic setting interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IStatisticSettingContext {
    pub vtable_: *const ZOOMSDK_IStatisticSettingContext__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IStatisticSettingContext"]
        [::std::mem::size_of::<ZOOMSDK_IStatisticSettingContext>() - 8usize];
    ["Alignment of ZOOMSDK_IStatisticSettingContext"]
        [::std::mem::align_of::<ZOOMSDK_IStatisticSettingContext>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IShareSettingContext__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Share setting interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IShareSettingContext {
    pub vtable_: *const ZOOMSDK_IShareSettingContext__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IShareSettingContext"]
        [::std::mem::size_of::<ZOOMSDK_IShareSettingContext>() - 8usize];
    ["Alignment of ZOOMSDK_IShareSettingContext"]
        [::std::mem::align_of::<ZOOMSDK_IShareSettingContext>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_ISettingService__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting setting interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_ISettingService {
    pub vtable_: *const ZOOMSDK_ISettingService__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ISettingService"][::std::mem::size_of::<ZOOMSDK_ISettingService>() - 8usize];
    ["Alignment of ZOOMSDK_ISettingService"]
        [::std::mem::align_of::<ZOOMSDK_ISettingService>() - 8usize];
};
pub const ZOOMSDK_SDKChatMessageType_SDKChatMessageType_To_None: ZOOMSDK_SDKChatMessageType = 0;
#[doc = "For initialize"]
pub const ZOOMSDK_SDKChatMessageType_SDKChatMessageType_To_All: ZOOMSDK_SDKChatMessageType = 1;
#[doc = "Chat message is send to all."]
pub const ZOOMSDK_SDKChatMessageType_SDKChatMessageType_To_All_Panelist:
    ZOOMSDK_SDKChatMessageType = 2;
#[doc = "Chat message is send to all panelists."]
pub const ZOOMSDK_SDKChatMessageType_SDKChatMessageType_To_Individual_Panelist:
    ZOOMSDK_SDKChatMessageType = 3;
#[doc = "Chat message is send to individual attendee and cc panelists."]
pub const ZOOMSDK_SDKChatMessageType_SDKChatMessageType_To_Individual: ZOOMSDK_SDKChatMessageType =
    4;
#[doc = "Chat message is send to individual user."]
pub const ZOOMSDK_SDKChatMessageType_SDKChatMessageType_To_WaitingRoomUsers:
    ZOOMSDK_SDKChatMessageType = 5;
#[doc = " @brief Enumerations of the type for chat message."]
pub type ZOOMSDK_SDKChatMessageType = ::std::os::raw::c_uint;
#[doc = " \\brief Bold attributes."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_BoldAttrs {
    pub bBold: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_BoldAttrs"][::std::mem::size_of::<ZOOMSDK_BoldAttrs>() - 1usize];
    ["Alignment of ZOOMSDK_BoldAttrs"][::std::mem::align_of::<ZOOMSDK_BoldAttrs>() - 1usize];
    ["Offset of field: ZOOMSDK_BoldAttrs::bBold"]
        [::std::mem::offset_of!(ZOOMSDK_BoldAttrs, bBold) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_ItalicAttrs {
    pub bItalic: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ItalicAttrs"][::std::mem::size_of::<ZOOMSDK_ItalicAttrs>() - 1usize];
    ["Alignment of ZOOMSDK_ItalicAttrs"][::std::mem::align_of::<ZOOMSDK_ItalicAttrs>() - 1usize];
    ["Offset of field: ZOOMSDK_ItalicAttrs::bItalic"]
        [::std::mem::offset_of!(ZOOMSDK_ItalicAttrs, bItalic) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_StrikethroughAttrs {
    pub bStrikethrough: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_StrikethroughAttrs"]
        [::std::mem::size_of::<ZOOMSDK_StrikethroughAttrs>() - 1usize];
    ["Alignment of ZOOMSDK_StrikethroughAttrs"]
        [::std::mem::align_of::<ZOOMSDK_StrikethroughAttrs>() - 1usize];
    ["Offset of field: ZOOMSDK_StrikethroughAttrs::bStrikethrough"]
        [::std::mem::offset_of!(ZOOMSDK_StrikethroughAttrs, bStrikethrough) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_BulletedListAttrs {
    pub bBulletedList: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_BulletedListAttrs"]
        [::std::mem::size_of::<ZOOMSDK_BulletedListAttrs>() - 1usize];
    ["Alignment of ZOOMSDK_BulletedListAttrs"]
        [::std::mem::align_of::<ZOOMSDK_BulletedListAttrs>() - 1usize];
    ["Offset of field: ZOOMSDK_BulletedListAttrs::bBulletedList"]
        [::std::mem::offset_of!(ZOOMSDK_BulletedListAttrs, bBulletedList) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_NumberedListAttrs {
    pub bNumberedList: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_NumberedListAttrs"]
        [::std::mem::size_of::<ZOOMSDK_NumberedListAttrs>() - 1usize];
    ["Alignment of ZOOMSDK_NumberedListAttrs"]
        [::std::mem::align_of::<ZOOMSDK_NumberedListAttrs>() - 1usize];
    ["Offset of field: ZOOMSDK_NumberedListAttrs::bNumberedList"]
        [::std::mem::offset_of!(ZOOMSDK_NumberedListAttrs, bNumberedList) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_UnderlineAttrs {
    pub bUnderline: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_UnderlineAttrs"][::std::mem::size_of::<ZOOMSDK_UnderlineAttrs>() - 1usize];
    ["Alignment of ZOOMSDK_UnderlineAttrs"]
        [::std::mem::align_of::<ZOOMSDK_UnderlineAttrs>() - 1usize];
    ["Offset of field: ZOOMSDK_UnderlineAttrs::bUnderline"]
        [::std::mem::offset_of!(ZOOMSDK_UnderlineAttrs, bUnderline) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_QuoteAttrs {
    pub bQuote: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_QuoteAttrs"][::std::mem::size_of::<ZOOMSDK_QuoteAttrs>() - 1usize];
    ["Alignment of ZOOMSDK_QuoteAttrs"][::std::mem::align_of::<ZOOMSDK_QuoteAttrs>() - 1usize];
    ["Offset of field: ZOOMSDK_QuoteAttrs::bQuote"]
        [::std::mem::offset_of!(ZOOMSDK_QuoteAttrs, bQuote) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_InsertLinkAttrs {
    pub insertLinkUrl: *const zchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_InsertLinkAttrs"][::std::mem::size_of::<ZOOMSDK_InsertLinkAttrs>() - 8usize];
    ["Alignment of ZOOMSDK_InsertLinkAttrs"]
        [::std::mem::align_of::<ZOOMSDK_InsertLinkAttrs>() - 8usize];
    ["Offset of field: ZOOMSDK_InsertLinkAttrs::insertLinkUrl"]
        [::std::mem::offset_of!(ZOOMSDK_InsertLinkAttrs, insertLinkUrl) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_FontSizeAttrs {
    pub fontSize: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_FontSizeAttrs"][::std::mem::size_of::<ZOOMSDK_FontSizeAttrs>() - 4usize];
    ["Alignment of ZOOMSDK_FontSizeAttrs"]
        [::std::mem::align_of::<ZOOMSDK_FontSizeAttrs>() - 4usize];
    ["Offset of field: ZOOMSDK_FontSizeAttrs::fontSize"]
        [::std::mem::offset_of!(ZOOMSDK_FontSizeAttrs, fontSize) - 0usize];
};
#[doc = " Currently supported font color combinations.\n FontColor_Red, 235,24,7\n FontColor_Orange, 255,138,0\n FontColor_Yellow, 248,194,0\n FontColor_Green, 19,138,0\n FontColor_Blue, 0,111,250\n FontColor_Violet, 152,70,255\n FontColor_Rosered, 226,0,148\n FontColor_Black 34,34,48"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_FontColorAttrs {
    pub red: ::std::os::raw::c_uint,
    pub green: ::std::os::raw::c_uint,
    pub blue: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_FontColorAttrs"][::std::mem::size_of::<ZOOMSDK_FontColorAttrs>() - 12usize];
    ["Alignment of ZOOMSDK_FontColorAttrs"]
        [::std::mem::align_of::<ZOOMSDK_FontColorAttrs>() - 4usize];
    ["Offset of field: ZOOMSDK_FontColorAttrs::red"]
        [::std::mem::offset_of!(ZOOMSDK_FontColorAttrs, red) - 0usize];
    ["Offset of field: ZOOMSDK_FontColorAttrs::green"]
        [::std::mem::offset_of!(ZOOMSDK_FontColorAttrs, green) - 4usize];
    ["Offset of field: ZOOMSDK_FontColorAttrs::blue"]
        [::std::mem::offset_of!(ZOOMSDK_FontColorAttrs, blue) - 8usize];
};
#[doc = " Currently supported background color combinations.\n BackgroundColor_Normal, 255,255,255\n BackgroundColor_Red, 255,67,67\n BackgroundColor_Orange, 255,138,0\n BackgroundColor_Yellow, 255,214,0\n BackgroundColor_Green, 73,214,30\n BackgroundColor_Blue, 47,139,255\n BackgroundColor_Violet, 171,104,255\n BackgroundColor_Rosered, 255,54,199\n BackgroundColor_White 255,255,255"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_BackgroundColorAttrs {
    pub red: ::std::os::raw::c_uint,
    pub green: ::std::os::raw::c_uint,
    pub blue: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_BackgroundColorAttrs"]
        [::std::mem::size_of::<ZOOMSDK_BackgroundColorAttrs>() - 12usize];
    ["Alignment of ZOOMSDK_BackgroundColorAttrs"]
        [::std::mem::align_of::<ZOOMSDK_BackgroundColorAttrs>() - 4usize];
    ["Offset of field: ZOOMSDK_BackgroundColorAttrs::red"]
        [::std::mem::offset_of!(ZOOMSDK_BackgroundColorAttrs, red) - 0usize];
    ["Offset of field: ZOOMSDK_BackgroundColorAttrs::green"]
        [::std::mem::offset_of!(ZOOMSDK_BackgroundColorAttrs, green) - 4usize];
    ["Offset of field: ZOOMSDK_BackgroundColorAttrs::blue"]
        [::std::mem::offset_of!(ZOOMSDK_BackgroundColorAttrs, blue) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_ParagraphAttrs {
    pub strParagraph: *const zchar_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ParagraphAttrs"][::std::mem::size_of::<ZOOMSDK_ParagraphAttrs>() - 8usize];
    ["Alignment of ZOOMSDK_ParagraphAttrs"]
        [::std::mem::align_of::<ZOOMSDK_ParagraphAttrs>() - 8usize];
    ["Offset of field: ZOOMSDK_ParagraphAttrs::strParagraph"]
        [::std::mem::offset_of!(ZOOMSDK_ParagraphAttrs, strParagraph) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IndentAttrs {
    pub indent: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IndentAttrs"][::std::mem::size_of::<ZOOMSDK_IndentAttrs>() - 4usize];
    ["Alignment of ZOOMSDK_IndentAttrs"][::std::mem::align_of::<ZOOMSDK_IndentAttrs>() - 4usize];
    ["Offset of field: ZOOMSDK_IndentAttrs::indent"]
        [::std::mem::offset_of!(ZOOMSDK_IndentAttrs, indent) - 0usize];
};
#[doc = " \\struct SegmentDetails\n\\brief information of rich text with style attributes in a chat message content.\nHere are more detailed structural descriptions.."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_SegmentDetails {
    pub strContent: *const zchar_t,
    pub boldAttrs: ZOOMSDK_BoldAttrs,
    pub italicAttrs: ZOOMSDK_ItalicAttrs,
    pub strikethroughAttrs: ZOOMSDK_StrikethroughAttrs,
    pub bulletedListAttrs: ZOOMSDK_BulletedListAttrs,
    pub numberedListAttrs: ZOOMSDK_NumberedListAttrs,
    pub underlineAttrs: ZOOMSDK_UnderlineAttrs,
    pub quoteAttrs: ZOOMSDK_QuoteAttrs,
    pub insertLinkAttrs: ZOOMSDK_InsertLinkAttrs,
    pub fontSizeAttrs: ZOOMSDK_FontSizeAttrs,
    pub fontColorAttrs: ZOOMSDK_FontColorAttrs,
    pub backgroundColorAttrs: ZOOMSDK_BackgroundColorAttrs,
    pub paragraphAttrs: ZOOMSDK_ParagraphAttrs,
    pub indentAttrs: ZOOMSDK_IndentAttrs,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_SegmentDetails"][::std::mem::size_of::<ZOOMSDK_SegmentDetails>() - 72usize];
    ["Alignment of ZOOMSDK_SegmentDetails"]
        [::std::mem::align_of::<ZOOMSDK_SegmentDetails>() - 8usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::strContent"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, strContent) - 0usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::boldAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, boldAttrs) - 8usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::italicAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, italicAttrs) - 9usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::strikethroughAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, strikethroughAttrs) - 10usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::bulletedListAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, bulletedListAttrs) - 11usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::numberedListAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, numberedListAttrs) - 12usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::underlineAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, underlineAttrs) - 13usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::quoteAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, quoteAttrs) - 14usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::insertLinkAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, insertLinkAttrs) - 16usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::fontSizeAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, fontSizeAttrs) - 24usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::fontColorAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, fontColorAttrs) - 28usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::backgroundColorAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, backgroundColorAttrs) - 40usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::paragraphAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, paragraphAttrs) - 56usize];
    ["Offset of field: ZOOMSDK_SegmentDetails::indentAttrs"]
        [::std::mem::offset_of!(ZOOMSDK_SegmentDetails, indentAttrs) - 64usize];
};
pub const ZOOMSDK_RichTextStyle_TextStyle_None: ZOOMSDK_RichTextStyle = 0;
#[doc = "Chat message rich text style normal."]
pub const ZOOMSDK_RichTextStyle_TextStyle_Bold: ZOOMSDK_RichTextStyle = 1;
#[doc = "Chat message rich text style bold."]
pub const ZOOMSDK_RichTextStyle_TextStyle_Italic: ZOOMSDK_RichTextStyle = 2;
#[doc = "Chat message rich text style italic."]
pub const ZOOMSDK_RichTextStyle_TextStyle_Strikethrough: ZOOMSDK_RichTextStyle = 3;
#[doc = "Chat message rich text style strike through."]
pub const ZOOMSDK_RichTextStyle_TextStyle_BulletedList: ZOOMSDK_RichTextStyle = 4;
#[doc = "Chat message rich text style bulleted list."]
pub const ZOOMSDK_RichTextStyle_TextStyle_NumberedList: ZOOMSDK_RichTextStyle = 5;
#[doc = "Chat message rich text style numbered list."]
pub const ZOOMSDK_RichTextStyle_TextStyle_Underline: ZOOMSDK_RichTextStyle = 6;
#[doc = "Chat message rich text style underline."]
pub const ZOOMSDK_RichTextStyle_TextStyle_FontSize: ZOOMSDK_RichTextStyle = 7;
#[doc = "Chat message rich text style font size."]
pub const ZOOMSDK_RichTextStyle_TextStyle_FontColor: ZOOMSDK_RichTextStyle = 8;
#[doc = "Chat message rich text style font color."]
pub const ZOOMSDK_RichTextStyle_TextStyle_BackgroundColor: ZOOMSDK_RichTextStyle = 9;
#[doc = "Chat message rich text style background color."]
pub const ZOOMSDK_RichTextStyle_TextStyle_Indent: ZOOMSDK_RichTextStyle = 10;
#[doc = "Chat message rich text style indent."]
pub const ZOOMSDK_RichTextStyle_TextStyle_Paragraph: ZOOMSDK_RichTextStyle = 11;
#[doc = "Chat message rich text style paragraph."]
pub const ZOOMSDK_RichTextStyle_TextStyle_Quote: ZOOMSDK_RichTextStyle = 12;
#[doc = "Chat message rich text style quote."]
pub const ZOOMSDK_RichTextStyle_TextStyle_InsertLink: ZOOMSDK_RichTextStyle = 13;
#[doc = " @brief Enumerations of the content rich text style type for chat message."]
pub type ZOOMSDK_RichTextStyle = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IRichTextStyleOffset__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Chat message rich text style offset.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IRichTextStyleOffset {
    pub vtable_: *const ZOOMSDK_IRichTextStyleOffset__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRichTextStyleOffset"]
        [::std::mem::size_of::<ZOOMSDK_IRichTextStyleOffset>() - 8usize];
    ["Alignment of ZOOMSDK_IRichTextStyleOffset"]
        [::std::mem::align_of::<ZOOMSDK_IRichTextStyleOffset>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IRichTextStyleItem__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Chat message rich text item of a certain style.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IRichTextStyleItem {
    pub vtable_: *const ZOOMSDK_IRichTextStyleItem__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRichTextStyleItem"]
        [::std::mem::size_of::<ZOOMSDK_IRichTextStyleItem>() - 8usize];
    ["Alignment of ZOOMSDK_IRichTextStyleItem"]
        [::std::mem::align_of::<ZOOMSDK_IRichTextStyleItem>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IChatMsgInfo__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Chat message interface.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IChatMsgInfo {
    pub vtable_: *const ZOOMSDK_IChatMsgInfo__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IChatMsgInfo"][::std::mem::size_of::<ZOOMSDK_IChatMsgInfo>() - 8usize];
    ["Alignment of ZOOMSDK_IChatMsgInfo"][::std::mem::align_of::<ZOOMSDK_IChatMsgInfo>() - 8usize];
};
#[doc = " \\struct NormalMeetingChatStaus\n\\brief The authority to chat in the normal meeting.\nHere are more detailed structural descriptions.."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagNormalMeetingChatStatus {
    #[doc = "<TRUE indicates that the user owns the authority to send message to chat."]
    pub can_chat: bool,
    #[doc = "<TRUE indicates that the user owns the authority to send message to all."]
    pub can_chat_to_all: bool,
    #[doc = "<TRUE indicates that the user owns the authority to send message to an individual attendee in the meeting."]
    pub can_chat_to_individual: bool,
    #[doc = "<TRUE indicates that the user owns the authority to send message only to the host."]
    pub is_only_can_chat_to_host: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagNormalMeetingChatStatus"]
        [::std::mem::size_of::<ZOOMSDK_tagNormalMeetingChatStatus>() - 4usize];
    ["Alignment of ZOOMSDK_tagNormalMeetingChatStatus"]
        [::std::mem::align_of::<ZOOMSDK_tagNormalMeetingChatStatus>() - 1usize];
    ["Offset of field: ZOOMSDK_tagNormalMeetingChatStatus::can_chat"]
        [::std::mem::offset_of!(ZOOMSDK_tagNormalMeetingChatStatus, can_chat) - 0usize];
    ["Offset of field: ZOOMSDK_tagNormalMeetingChatStatus::can_chat_to_all"]
        [::std::mem::offset_of!(ZOOMSDK_tagNormalMeetingChatStatus, can_chat_to_all) - 1usize];
    ["Offset of field: ZOOMSDK_tagNormalMeetingChatStatus::can_chat_to_individual"][::std::mem::offset_of!(
        ZOOMSDK_tagNormalMeetingChatStatus,
        can_chat_to_individual
    ) - 2usize];
    ["Offset of field: ZOOMSDK_tagNormalMeetingChatStatus::is_only_can_chat_to_host"][::std::mem::offset_of!(
        ZOOMSDK_tagNormalMeetingChatStatus,
        is_only_can_chat_to_host
    ) - 3usize];
};
#[doc = " \\struct NormalMeetingChatStaus\n\\brief The authority to chat in the normal meeting.\nHere are more detailed structural descriptions.."]
pub type ZOOMSDK_NormalMeetingChatStatus = ZOOMSDK_tagNormalMeetingChatStatus;
#[doc = " \\struct tagWebinarAttendeeChatStatus\n\\brief The authority to chat for the normal attendee in the webinar.\nHere are more detailed structural descriptions.."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagWebinarAttendeeChatStatus {
    #[doc = "<TRUE indicates that the attendee can send message to chat."]
    pub can_chat: bool,
    #[doc = "<TRUE indicates that the user owns the authority to send message to all the panelists and attendees."]
    pub can_chat_to_all_panellist_and_attendee: bool,
    #[doc = "<TRUE indicates that the user owns the authority to send message to all the panelists."]
    pub can_chat_to_all_panellist: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagWebinarAttendeeChatStatus"]
        [::std::mem::size_of::<ZOOMSDK_tagWebinarAttendeeChatStatus>() - 3usize];
    ["Alignment of ZOOMSDK_tagWebinarAttendeeChatStatus"]
        [::std::mem::align_of::<ZOOMSDK_tagWebinarAttendeeChatStatus>() - 1usize];
    ["Offset of field: ZOOMSDK_tagWebinarAttendeeChatStatus::can_chat"]
        [::std::mem::offset_of!(ZOOMSDK_tagWebinarAttendeeChatStatus, can_chat) - 0usize];
    ["Offset of field: ZOOMSDK_tagWebinarAttendeeChatStatus::can_chat_to_all_panellist_and_attendee"] [:: std :: mem :: offset_of ! (ZOOMSDK_tagWebinarAttendeeChatStatus , can_chat_to_all_panellist_and_attendee) - 1usize] ;
    ["Offset of field: ZOOMSDK_tagWebinarAttendeeChatStatus::can_chat_to_all_panellist"][::std::mem::offset_of!(
        ZOOMSDK_tagWebinarAttendeeChatStatus,
        can_chat_to_all_panellist
    )
        - 2usize];
};
#[doc = " \\struct tagWebinarAttendeeChatStatus\n\\brief The authority to chat for the normal attendee in the webinar.\nHere are more detailed structural descriptions.."]
pub type ZOOMSDK_WebinarAttendeeChatStatus = ZOOMSDK_tagWebinarAttendeeChatStatus;
#[doc = " \\struct tagWebinarOtherUserRoleChatStatus\n\\brief The authority to chat for the host, co-host and panelist to chat in webinar.\nHere are more detailed structural descriptions.."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagWebinarOtherUserRoleChatStatus {
    #[doc = "<TRUE indicates that the user owns the authority to send message to all the panelists."]
    pub can_chat_to_all_panellist: bool,
    #[doc = "<TRUE indicates that the user owns the authority to send message to all."]
    pub can_chat_to_all_panellist_and_attendee: bool,
    #[doc = "<TRUE indicates that the user owns the authority to send message to individual attendee."]
    pub can_chat_to_individual: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagWebinarOtherUserRoleChatStatus"]
        [::std::mem::size_of::<ZOOMSDK_tagWebinarOtherUserRoleChatStatus>() - 3usize];
    ["Alignment of ZOOMSDK_tagWebinarOtherUserRoleChatStatus"]
        [::std::mem::align_of::<ZOOMSDK_tagWebinarOtherUserRoleChatStatus>() - 1usize];
    ["Offset of field: ZOOMSDK_tagWebinarOtherUserRoleChatStatus::can_chat_to_all_panellist"][::std::mem::offset_of!(
        ZOOMSDK_tagWebinarOtherUserRoleChatStatus,
        can_chat_to_all_panellist
    )
        - 0usize];
    ["Offset of field: ZOOMSDK_tagWebinarOtherUserRoleChatStatus::can_chat_to_all_panellist_and_attendee"] [:: std :: mem :: offset_of ! (ZOOMSDK_tagWebinarOtherUserRoleChatStatus , can_chat_to_all_panellist_and_attendee) - 1usize] ;
    ["Offset of field: ZOOMSDK_tagWebinarOtherUserRoleChatStatus::can_chat_to_individual"][::std::mem::offset_of!(
        ZOOMSDK_tagWebinarOtherUserRoleChatStatus,
        can_chat_to_individual
    )
        - 2usize];
};
#[doc = " \\struct tagWebinarOtherUserRoleChatStatus\n\\brief The authority to chat for the host, co-host and panelist to chat in webinar.\nHere are more detailed structural descriptions.."]
pub type ZOOMSDK_WebinarOtherUserRoleChatStatus = ZOOMSDK_tagWebinarOtherUserRoleChatStatus;
#[doc = " \\struct tagChatStatus\n\\brief The authority to chat in the specified meeting.\nHere are more detailed structural descriptions.."]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ZOOMSDK_tagChatStatus {
    #[doc = "<The ut value depends on the value of the other members in the structure. When the value of is_webinar_meeting is false, the ut value is the NormalMeetingChatStausnormal_meeting_status. When the values of the is_webinar_meeting and the is_webinar_attendee is true, the ut value is WebinarAttendeeChatStatus webinar_attendee_status. The value of is_webinar_meeting is true while the is_webinar_attendee is false, the ut value is WebinarOtherUserRoleChatStatus webinar_other_status."]
    pub ut: ZOOMSDK_tagChatStatus__bindgen_ty_1,
    #[doc = "<TRUE indicates that it is disabled to chat in the specified meeting."]
    pub is_chat_off: bool,
    #[doc = "<TRUE indicates that the owner of the current message is the attendee of the webinar."]
    pub is_webinar_attendee: bool,
    #[doc = "<TRUE indicates that the current meeting is webinar."]
    pub is_webinar_meeting: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ZOOMSDK_tagChatStatus__bindgen_ty_1 {
    pub normal_meeting_status: ZOOMSDK_NormalMeetingChatStatus,
    pub webinar_attendee_status: ZOOMSDK_WebinarAttendeeChatStatus,
    pub webinar_other_status: ZOOMSDK_WebinarOtherUserRoleChatStatus,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagChatStatus__bindgen_ty_1"]
        [::std::mem::size_of::<ZOOMSDK_tagChatStatus__bindgen_ty_1>() - 4usize];
    ["Alignment of ZOOMSDK_tagChatStatus__bindgen_ty_1"]
        [::std::mem::align_of::<ZOOMSDK_tagChatStatus__bindgen_ty_1>() - 1usize];
    ["Offset of field: ZOOMSDK_tagChatStatus__bindgen_ty_1::normal_meeting_status"][::std::mem::offset_of!(
        ZOOMSDK_tagChatStatus__bindgen_ty_1,
        normal_meeting_status
    ) - 0usize];
    ["Offset of field: ZOOMSDK_tagChatStatus__bindgen_ty_1::webinar_attendee_status"][::std::mem::offset_of!(
        ZOOMSDK_tagChatStatus__bindgen_ty_1,
        webinar_attendee_status
    ) - 0usize];
    ["Offset of field: ZOOMSDK_tagChatStatus__bindgen_ty_1::webinar_other_status"][::std::mem::offset_of!(
        ZOOMSDK_tagChatStatus__bindgen_ty_1,
        webinar_other_status
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagChatStatus"][::std::mem::size_of::<ZOOMSDK_tagChatStatus>() - 7usize];
    ["Alignment of ZOOMSDK_tagChatStatus"]
        [::std::mem::align_of::<ZOOMSDK_tagChatStatus>() - 1usize];
    ["Offset of field: ZOOMSDK_tagChatStatus::ut"]
        [::std::mem::offset_of!(ZOOMSDK_tagChatStatus, ut) - 0usize];
    ["Offset of field: ZOOMSDK_tagChatStatus::is_chat_off"]
        [::std::mem::offset_of!(ZOOMSDK_tagChatStatus, is_chat_off) - 4usize];
    ["Offset of field: ZOOMSDK_tagChatStatus::is_webinar_attendee"]
        [::std::mem::offset_of!(ZOOMSDK_tagChatStatus, is_webinar_attendee) - 5usize];
    ["Offset of field: ZOOMSDK_tagChatStatus::is_webinar_meeting"]
        [::std::mem::offset_of!(ZOOMSDK_tagChatStatus, is_webinar_meeting) - 6usize];
};
#[doc = " \\struct tagChatStatus\n\\brief The authority to chat in the specified meeting.\nHere are more detailed structural descriptions.."]
pub type ZOOMSDK_ChatStatus = ZOOMSDK_tagChatStatus;
pub const ZOOMSDK_SDKChatPrivilege_SDK_CHAT_PRIVILEGE_ALL: ZOOMSDK_SDKChatPrivilege = 1;
#[doc = " allow attendee to chat with everyone [meeting & webinar]"]
pub const ZOOMSDK_SDKChatPrivilege_SDK_CHAT_PRIVILEGE_ALL_PANELIST: ZOOMSDK_SDKChatPrivilege = 2;
#[doc = " allow attendee to chat with all panelists only, but cannot to \"all panelists and attendees\" [webinar]"]
pub const ZOOMSDK_SDKChatPrivilege_SDK_CHAT_PRIVILEGE_HOST: ZOOMSDK_SDKChatPrivilege = 3;
#[doc = " allow attendee to chat with host only [meeting]"]
pub const ZOOMSDK_SDKChatPrivilege_SDK_CHAT_PRIVILEGE_DISABLE_ATTENDEE_CHAT:
    ZOOMSDK_SDKChatPrivilege = 4;
#[doc = " allow attendee to chat with no one [meeting & webinar]"]
pub const ZOOMSDK_SDKChatPrivilege_SDK_CHAT_PRIVILEGE_HOST_PUBLIC: ZOOMSDK_SDKChatPrivilege = 5;
#[doc = " allow attendee to chat with host and public [meeting]"]
pub const ZOOMSDK_SDKChatPrivilege_SDK_CHAT_PRIVILEGE_END: ZOOMSDK_SDKChatPrivilege = 6;
#[doc = " @brief Enumerations of the chat priviledge."]
pub type ZOOMSDK_SDKChatPrivilege = ::std::os::raw::c_uint;
pub const ZOOMSDK_SDKChatMessageDeleteType_SDK_CHAT_DELETE_BY_NONE:
    ZOOMSDK_SDKChatMessageDeleteType = 0;
#[doc = " none"]
pub const ZOOMSDK_SDKChatMessageDeleteType_SDK_CHAT_DELETE_BY_SELF:
    ZOOMSDK_SDKChatMessageDeleteType = 1;
#[doc = " delete by self"]
pub const ZOOMSDK_SDKChatMessageDeleteType_SDK_CHAT_DELETE_BY_HOST:
    ZOOMSDK_SDKChatMessageDeleteType = 2;
#[doc = " delete by host"]
pub const ZOOMSDK_SDKChatMessageDeleteType_SDK_CHAT_DELETE_BY_DLP:
    ZOOMSDK_SDKChatMessageDeleteType = 3;
#[doc = " @brief Enumerations of the chat message delete type."]
pub type ZOOMSDK_SDKChatMessageDeleteType = ::std::os::raw::c_uint;
#[doc = "< The file transfer has no state."]
pub const ZOOMSDK_SDKFileTransferStatus_SDKFileTransferState_None: ZOOMSDK_SDKFileTransferStatus =
    0;
#[doc = "< The file transfer is ready to start."]
pub const ZOOMSDK_SDKFileTransferStatus_SDKFileTransferState_ReadyToTransfer:
    ZOOMSDK_SDKFileTransferStatus = 1;
#[doc = "< The file transfer is in progress."]
pub const ZOOMSDK_SDKFileTransferStatus_SDKFileTransferState_Transfering:
    ZOOMSDK_SDKFileTransferStatus = 2;
#[doc = "< The file transfer failed."]
pub const ZOOMSDK_SDKFileTransferStatus_SDKFileTransferState_TransferFailed:
    ZOOMSDK_SDKFileTransferStatus = 3;
#[doc = "< The file transfer completed successfully."]
pub const ZOOMSDK_SDKFileTransferStatus_SDKFileTransferState_TransferDone:
    ZOOMSDK_SDKFileTransferStatus = 4;
pub type ZOOMSDK_SDKFileTransferStatus = ::std::os::raw::c_uint;
#[doc = " \\brief The basic information of transfer file"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagSDKFileTransferInfo {
    #[doc = "<The message identify of transfer file."]
    pub messageID: *const zchar_t,
    #[doc = "< he status of the file transfer."]
    pub trans_status: ZOOMSDK_SDKFileTransferStatus,
    #[doc = "<The time stamp of the file."]
    pub time_stamp: time_t,
    #[doc = "<Is the file send to all user in meeting?"]
    pub is_send_to_all: bool,
    #[doc = "<The bytes of transfer file size."]
    pub file_size: ::std::os::raw::c_uint,
    #[doc = "<the file name of transfer file."]
    pub file_name: *const zchar_t,
    #[doc = "<The percentage of the file transfer completed."]
    pub complete_percentage: ::std::os::raw::c_uint,
    #[doc = "<The size of the file transferred so far in bytes."]
    pub complete_size: ::std::os::raw::c_uint,
    #[doc = "<The speed of the file transfer in bits per second."]
    pub bit_per_second: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagSDKFileTransferInfo"]
        [::std::mem::size_of::<ZOOMSDK_tagSDKFileTransferInfo>() - 56usize];
    ["Alignment of ZOOMSDK_tagSDKFileTransferInfo"]
        [::std::mem::align_of::<ZOOMSDK_tagSDKFileTransferInfo>() - 8usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::messageID"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, messageID) - 0usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::trans_status"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, trans_status) - 8usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::time_stamp"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, time_stamp) - 16usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::is_send_to_all"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, is_send_to_all) - 24usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::file_size"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, file_size) - 28usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::file_name"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, file_name) - 32usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::complete_percentage"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, complete_percentage) - 40usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::complete_size"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, complete_size) - 44usize];
    ["Offset of field: ZOOMSDK_tagSDKFileTransferInfo::bit_per_second"]
        [::std::mem::offset_of!(ZOOMSDK_tagSDKFileTransferInfo, bit_per_second) - 48usize];
};
#[doc = " \\brief The basic information of transfer file"]
pub type ZOOMSDK_SDKFileTransferInfo = ZOOMSDK_tagSDKFileTransferInfo;
#[repr(C)]
pub struct ZOOMSDK_ISDKFileSender__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_ISDKFileSender {
    pub vtable_: *const ZOOMSDK_ISDKFileSender__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ISDKFileSender"][::std::mem::size_of::<ZOOMSDK_ISDKFileSender>() - 8usize];
    ["Alignment of ZOOMSDK_ISDKFileSender"]
        [::std::mem::align_of::<ZOOMSDK_ISDKFileSender>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_ISDKFileReceiver__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_ISDKFileReceiver {
    pub vtable_: *const ZOOMSDK_ISDKFileReceiver__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ISDKFileReceiver"]
        [::std::mem::size_of::<ZOOMSDK_ISDKFileReceiver>() - 8usize];
    ["Alignment of ZOOMSDK_ISDKFileReceiver"]
        [::std::mem::align_of::<ZOOMSDK_ISDKFileReceiver>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingChatCtrlEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting chat callback event.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMeetingChatCtrlEvent {
    pub vtable_: *const ZOOMSDK_IMeetingChatCtrlEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingChatCtrlEvent"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingChatCtrlEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingChatCtrlEvent"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingChatCtrlEvent>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IChatMsgInfoBuilder__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Chat message builder to create ChatMsgInfo objects.\n Tips: If there are duplicate styles, the final appearance is determined by the last applied setting.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IChatMsgInfoBuilder {
    pub vtable_: *const ZOOMSDK_IChatMsgInfoBuilder__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IChatMsgInfoBuilder"]
        [::std::mem::size_of::<ZOOMSDK_IChatMsgInfoBuilder>() - 8usize];
    ["Alignment of ZOOMSDK_IChatMsgInfoBuilder"]
        [::std::mem::align_of::<ZOOMSDK_IChatMsgInfoBuilder>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingChatController__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting chat controller interface\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingChatController {
    pub vtable_: *const ZOOMSDK_IMeetingChatController__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingChatController"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingChatController>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingChatController"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingChatController>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IZoomSDKShareSourceHelper {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}HasRawdataLicense"]
    pub fn ZOOMSDK_HasRawdataLicense() -> bool;
}
extern "C" {
    #[link_name = "\u{1}GetRawdataVideoSourceHelper"]
    pub fn ZOOMSDK_GetRawdataVideoSourceHelper() -> *mut ZOOMSDK_IZoomSDKVideoSourceHelper;
}
extern "C" {
    #[link_name = "\u{1}GetRawdataShareSourceHelper"]
    pub fn ZOOMSDK_GetRawdataShareSourceHelper() -> *mut ZOOMSDK_IZoomSDKShareSourceHelper;
}
extern "C" {
    #[link_name = "\u{1}GetAudioRawdataHelper"]
    pub fn ZOOMSDK_GetAudioRawdataHelper() -> *mut ZOOMSDK_IZoomSDKAudioRawDataHelper;
}
extern "C" {
    #[link_name = "\u{1}createRenderer"]
    pub fn ZOOMSDK_createRenderer(
        ppRenderer: *mut *mut ZOOMSDK_IZoomSDKRenderer,
        pDelegate: *mut ZOOMSDK_IZoomSDKRendererDelegate,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[link_name = "\u{1}destroyRenderer"]
    pub fn ZOOMSDK_destroyRenderer(pRenderer: *mut ZOOMSDK_IZoomSDKRenderer) -> ZOOMSDK_SDKError;
}
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKPreProcessor__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKPreProcessor {
    pub vtable_: *const ZOOMSDK_IZoomSDKPreProcessor__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKPreProcessor"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKPreProcessor>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKPreProcessor"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKPreProcessor>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKVideoSender__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKVideoSender {
    pub vtable_: *const ZOOMSDK_IZoomSDKVideoSender__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKVideoSender"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKVideoSender>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKVideoSender"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKVideoSender>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_VideoSourceCapability {
    pub width: ::std::os::raw::c_uint,
    pub height: ::std::os::raw::c_uint,
    pub frame: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_VideoSourceCapability"]
        [::std::mem::size_of::<ZOOMSDK_VideoSourceCapability>() - 12usize];
    ["Alignment of ZOOMSDK_VideoSourceCapability"]
        [::std::mem::align_of::<ZOOMSDK_VideoSourceCapability>() - 4usize];
    ["Offset of field: ZOOMSDK_VideoSourceCapability::width"]
        [::std::mem::offset_of!(ZOOMSDK_VideoSourceCapability, width) - 0usize];
    ["Offset of field: ZOOMSDK_VideoSourceCapability::height"]
        [::std::mem::offset_of!(ZOOMSDK_VideoSourceCapability, height) - 4usize];
    ["Offset of field: ZOOMSDK_VideoSourceCapability::frame"]
        [::std::mem::offset_of!(ZOOMSDK_VideoSourceCapability, frame) - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKVideoSource__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKVideoSource {
    pub vtable_: *const ZOOMSDK_IZoomSDKVideoSource__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKVideoSource"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKVideoSource>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKVideoSource"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKVideoSource>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKVideoSourceHelper__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKVideoSourceHelper {
    pub vtable_: *const ZOOMSDK_IZoomSDKVideoSourceHelper__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKVideoSourceHelper"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKVideoSourceHelper>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKVideoSourceHelper"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKVideoSourceHelper>() - 8usize];
};
#[doc = "<Video is on."]
pub const ZOOMSDK_VideoStatus_Video_ON: ZOOMSDK_VideoStatus = 0;
#[doc = "<Video is off."]
pub const ZOOMSDK_VideoStatus_Video_OFF: ZOOMSDK_VideoStatus = 1;
#[doc = "<Video is muted by host."]
pub const ZOOMSDK_VideoStatus_Video_Mute_ByHost: ZOOMSDK_VideoStatus = 2;
#[doc = " \\enum VideoStatus\n\\brief The video status of the user.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_VideoStatus = ::std::os::raw::c_uint;
pub const ZOOMSDK_VideoConnectionQuality_VideoConnectionQuality_Unknown:
    ZOOMSDK_VideoConnectionQuality = 0;
pub const ZOOMSDK_VideoConnectionQuality_VideoConnectionQuality_Bad:
    ZOOMSDK_VideoConnectionQuality = 1;
pub const ZOOMSDK_VideoConnectionQuality_VideoConnectionQuality_Normal:
    ZOOMSDK_VideoConnectionQuality = 2;
pub const ZOOMSDK_VideoConnectionQuality_VideoConnectionQuality_Good:
    ZOOMSDK_VideoConnectionQuality = 3;
#[doc = " \\enum VideoConnectionQuality\n\\brief The video quality of the user.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_VideoConnectionQuality = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagVideoSize {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagVideoSize"][::std::mem::size_of::<ZOOMSDK_tagVideoSize>() - 8usize];
    ["Alignment of ZOOMSDK_tagVideoSize"][::std::mem::align_of::<ZOOMSDK_tagVideoSize>() - 4usize];
    ["Offset of field: ZOOMSDK_tagVideoSize::width"]
        [::std::mem::offset_of!(ZOOMSDK_tagVideoSize, width) - 0usize];
    ["Offset of field: ZOOMSDK_tagVideoSize::height"]
        [::std::mem::offset_of!(ZOOMSDK_tagVideoSize, height) - 4usize];
};
pub type ZOOMSDK_VideoSize = ZOOMSDK_tagVideoSize;
#[repr(C)]
pub struct ZOOMSDK_ISetVideoOrderHelper__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief set video order helper interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_ISetVideoOrderHelper {
    pub vtable_: *const ZOOMSDK_ISetVideoOrderHelper__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ISetVideoOrderHelper"]
        [::std::mem::size_of::<ZOOMSDK_ISetVideoOrderHelper>() - 8usize];
    ["Alignment of ZOOMSDK_ISetVideoOrderHelper"]
        [::std::mem::align_of::<ZOOMSDK_ISetVideoOrderHelper>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IRequestStartVideoHandler__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Process after the user receives the requirement from the host to turn on the video."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IRequestStartVideoHandler {
    pub vtable_: *const ZOOMSDK_IRequestStartVideoHandler__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRequestStartVideoHandler"]
        [::std::mem::size_of::<ZOOMSDK_IRequestStartVideoHandler>() - 8usize];
    ["Alignment of ZOOMSDK_IRequestStartVideoHandler"]
        [::std::mem::align_of::<ZOOMSDK_IRequestStartVideoHandler>() - 8usize];
};
pub const ZOOMSDK_CameraControlRequestType_CameraControlRequestType_Unknown:
    ZOOMSDK_CameraControlRequestType = 0;
pub const ZOOMSDK_CameraControlRequestType_CameraControlRequestType_RequestControl:
    ZOOMSDK_CameraControlRequestType = 1;
pub const ZOOMSDK_CameraControlRequestType_CameraControlRequestType_GiveUpControl:
    ZOOMSDK_CameraControlRequestType = 2;
#[doc = " \\enum CameraControlRequestType\n\\brief The camera control request type.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_CameraControlRequestType = ::std::os::raw::c_uint;
pub const ZOOMSDK_CameraControlRequestResult_CameraControlRequestResult_Approve:
    ZOOMSDK_CameraControlRequestResult = 0;
pub const ZOOMSDK_CameraControlRequestResult_CameraControlRequestResult_Decline:
    ZOOMSDK_CameraControlRequestResult = 1;
pub const ZOOMSDK_CameraControlRequestResult_CameraControlRequestResult_Revoke:
    ZOOMSDK_CameraControlRequestResult = 2;
#[doc = " \\enum CameraControlRequestResult\n\\brief The camera control request result.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_CameraControlRequestResult = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_ICameraControlRequestHandler__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Camera control request."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_ICameraControlRequestHandler {
    pub vtable_: *const ZOOMSDK_ICameraControlRequestHandler__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ICameraControlRequestHandler"]
        [::std::mem::size_of::<ZOOMSDK_ICameraControlRequestHandler>() - 8usize];
    ["Alignment of ZOOMSDK_ICameraControlRequestHandler"]
        [::std::mem::align_of::<ZOOMSDK_ICameraControlRequestHandler>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingVideoCtrlEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting video controller event callback\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMeetingVideoCtrlEvent {
    pub vtable_: *const ZOOMSDK_IMeetingVideoCtrlEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingVideoCtrlEvent"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingVideoCtrlEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingVideoCtrlEvent"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingVideoCtrlEvent>() - 8usize];
};
pub const ZOOMSDK_PinResult_PinResult_Success: ZOOMSDK_PinResult = 0;
pub const ZOOMSDK_PinResult_PinResult_Fail_NotEnoughUsers: ZOOMSDK_PinResult = 1;
#[doc = " user counts less than 2"]
pub const ZOOMSDK_PinResult_PinResult_Fail_ToMuchPinnedUsers: ZOOMSDK_PinResult = 2;
#[doc = " pinned user counts more than 9"]
pub const ZOOMSDK_PinResult_PinResult_Fail_UserCannotBePinned: ZOOMSDK_PinResult = 3;
#[doc = " user in view only mode or silent mode or active"]
pub const ZOOMSDK_PinResult_PinResult_Fail_VideoModeDoNotSupport: ZOOMSDK_PinResult = 4;
#[doc = " other reasons"]
pub const ZOOMSDK_PinResult_PinResult_Fail_NoPrivilegeToPin: ZOOMSDK_PinResult = 5;
#[doc = " current user has no privilege to pin"]
pub const ZOOMSDK_PinResult_PinResult_Fail_MeetingDoNotSupport: ZOOMSDK_PinResult = 6;
#[doc = " webinar and in view only meeting"]
pub const ZOOMSDK_PinResult_PinResult_Unknown: ZOOMSDK_PinResult = 100;
pub type ZOOMSDK_PinResult = ::std::os::raw::c_uint;
pub const ZOOMSDK_SpotlightResult_SpotResult_Success: ZOOMSDK_SpotlightResult = 0;
pub const ZOOMSDK_SpotlightResult_SpotResult_Fail_NotEnoughUsers: ZOOMSDK_SpotlightResult = 1;
#[doc = " user counts less than 2"]
pub const ZOOMSDK_SpotlightResult_SpotResult_Fail_ToMuchSpotlightedUsers: ZOOMSDK_SpotlightResult =
    2;
#[doc = " spotlighted user counts is more than 9"]
pub const ZOOMSDK_SpotlightResult_SpotResult_Fail_UserCannotBeSpotlighted: ZOOMSDK_SpotlightResult =
    3;
#[doc = " user in view only mode or silent mode or active"]
pub const ZOOMSDK_SpotlightResult_SpotResult_Fail_UserWithoutVideo: ZOOMSDK_SpotlightResult = 4;
#[doc = " user doesn't turn on video"]
pub const ZOOMSDK_SpotlightResult_SpotResult_Fail_NoPrivilegeToSpotlight: ZOOMSDK_SpotlightResult =
    5;
#[doc = " current user has no privilege to spotlight"]
pub const ZOOMSDK_SpotlightResult_SpotResult_Fail_UserNotSpotlighted: ZOOMSDK_SpotlightResult = 6;
#[doc = "user is not spotlighted"]
pub const ZOOMSDK_SpotlightResult_SpotResult_Unknown: ZOOMSDK_SpotlightResult = 100;
pub type ZOOMSDK_SpotlightResult = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IMeetingCameraHelper__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting camera helper interface\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMeetingCameraHelper {
    pub vtable_: *const ZOOMSDK_IMeetingCameraHelper__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingCameraHelper"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingCameraHelper>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingCameraHelper"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingCameraHelper>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingVideoController__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting video controller interface\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingVideoController {
    pub vtable_: *const ZOOMSDK_IMeetingVideoController__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingVideoController"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingVideoController>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingVideoController"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingVideoController>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKAudioRawDataDelegate__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKAudioRawDataDelegate {
    pub vtable_: *const ZOOMSDK_IZoomSDKAudioRawDataDelegate__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKAudioRawDataDelegate"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKAudioRawDataDelegate>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKAudioRawDataDelegate"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKAudioRawDataDelegate>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKAudioRawDataSender__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKAudioRawDataSender {
    pub vtable_: *const ZOOMSDK_IZoomSDKAudioRawDataSender__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKAudioRawDataSender"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKAudioRawDataSender>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKAudioRawDataSender"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKAudioRawDataSender>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKVirtualAudioMicEvent__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKVirtualAudioMicEvent {
    pub vtable_: *const ZOOMSDK_IZoomSDKVirtualAudioMicEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKVirtualAudioMicEvent"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKVirtualAudioMicEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKVirtualAudioMicEvent"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKVirtualAudioMicEvent>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKAudioRawDataHelper__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKAudioRawDataHelper {
    pub vtable_: *const ZOOMSDK_IZoomSDKAudioRawDataHelper__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKAudioRawDataHelper"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKAudioRawDataHelper>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKAudioRawDataHelper"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKAudioRawDataHelper>() - 8usize];
};
pub const ZOOMSDK_ZoomSDKResolution_ZoomSDKResolution_90P: ZOOMSDK_ZoomSDKResolution = 0;
pub const ZOOMSDK_ZoomSDKResolution_ZoomSDKResolution_180P: ZOOMSDK_ZoomSDKResolution = 1;
pub const ZOOMSDK_ZoomSDKResolution_ZoomSDKResolution_360P: ZOOMSDK_ZoomSDKResolution = 2;
pub const ZOOMSDK_ZoomSDKResolution_ZoomSDKResolution_720P: ZOOMSDK_ZoomSDKResolution = 3;
pub const ZOOMSDK_ZoomSDKResolution_ZoomSDKResolution_1080P: ZOOMSDK_ZoomSDKResolution = 4;
pub const ZOOMSDK_ZoomSDKResolution_ZoomSDKResolution_NoUse: ZOOMSDK_ZoomSDKResolution = 100;
pub type ZOOMSDK_ZoomSDKResolution = ::std::os::raw::c_uint;
pub const ZOOMSDK_ZoomSDKRawDataType_RAW_DATA_TYPE_VIDEO: ZOOMSDK_ZoomSDKRawDataType = 0;
pub const ZOOMSDK_ZoomSDKRawDataType_RAW_DATA_TYPE_SHARE: ZOOMSDK_ZoomSDKRawDataType = 1;
pub type ZOOMSDK_ZoomSDKRawDataType = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKRendererDelegate__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKRendererDelegate {
    pub vtable_: *const ZOOMSDK_IZoomSDKRendererDelegate__bindgen_vtable,
}
pub const ZOOMSDK_IZoomSDKRendererDelegate_RawDataStatus_RawData_On:
    ZOOMSDK_IZoomSDKRendererDelegate_RawDataStatus = 0;
pub const ZOOMSDK_IZoomSDKRendererDelegate_RawDataStatus_RawData_Off:
    ZOOMSDK_IZoomSDKRendererDelegate_RawDataStatus = 1;
pub type ZOOMSDK_IZoomSDKRendererDelegate_RawDataStatus = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKRendererDelegate"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKRendererDelegate>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKRendererDelegate"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKRendererDelegate>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IZoomSDKRenderer__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IZoomSDKRenderer {
    pub vtable_: *const ZOOMSDK_IZoomSDKRenderer__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IZoomSDKRenderer"]
        [::std::mem::size_of::<ZOOMSDK_IZoomSDKRenderer>() - 8usize];
    ["Alignment of ZOOMSDK_IZoomSDKRenderer"]
        [::std::mem::align_of::<ZOOMSDK_IZoomSDKRenderer>() - 8usize];
};
#[doc = "<Initialization."]
pub const ZOOMSDK_AudioStatus_Audio_None: ZOOMSDK_AudioStatus = 0;
#[doc = "<Muted status."]
pub const ZOOMSDK_AudioStatus_Audio_Muted: ZOOMSDK_AudioStatus = 1;
#[doc = "<Unmuted status."]
pub const ZOOMSDK_AudioStatus_Audio_UnMuted: ZOOMSDK_AudioStatus = 2;
#[doc = "<Muted by the host."]
pub const ZOOMSDK_AudioStatus_Audio_Muted_ByHost: ZOOMSDK_AudioStatus = 3;
#[doc = "<Unmuted by the host."]
pub const ZOOMSDK_AudioStatus_Audio_UnMuted_ByHost: ZOOMSDK_AudioStatus = 4;
#[doc = "<The host mutes all."]
pub const ZOOMSDK_AudioStatus_Audio_MutedAll_ByHost: ZOOMSDK_AudioStatus = 5;
#[doc = "<The host unmutes all."]
pub const ZOOMSDK_AudioStatus_Audio_UnMutedAll_ByHost: ZOOMSDK_AudioStatus = 6;
#[doc = " \\enum AudioStatus\n\\brief Define the audio status of the user.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_AudioStatus = ::std::os::raw::c_uint;
#[doc = "<Normal audio type."]
pub const ZOOMSDK_AudioType_AUDIOTYPE_NONE: ZOOMSDK_AudioType = 0;
#[doc = "<In VoIP mode."]
pub const ZOOMSDK_AudioType_AUDIOTYPE_VOIP: ZOOMSDK_AudioType = 1;
#[doc = "<In telephone mode."]
pub const ZOOMSDK_AudioType_AUDIOTYPE_PHONE: ZOOMSDK_AudioType = 2;
#[doc = "<Unknown mode."]
pub const ZOOMSDK_AudioType_AUDIOTYPE_UNKNOWN: ZOOMSDK_AudioType = 3;
#[doc = " \\enum AudioType\n\\brief Define the audio type of the user.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_AudioType = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IRequestStartAudioHandler__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Process after the user receives the requirement from the host to turn on the audio."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IRequestStartAudioHandler {
    pub vtable_: *const ZOOMSDK_IRequestStartAudioHandler__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRequestStartAudioHandler"]
        [::std::mem::size_of::<ZOOMSDK_IRequestStartAudioHandler>() - 8usize];
    ["Alignment of ZOOMSDK_IRequestStartAudioHandler"]
        [::std::mem::align_of::<ZOOMSDK_IRequestStartAudioHandler>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IUserAudioStatus__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief User audio status interface."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IUserAudioStatus {
    pub vtable_: *const ZOOMSDK_IUserAudioStatus__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IUserAudioStatus"]
        [::std::mem::size_of::<ZOOMSDK_IUserAudioStatus>() - 8usize];
    ["Alignment of ZOOMSDK_IUserAudioStatus"]
        [::std::mem::align_of::<ZOOMSDK_IUserAudioStatus>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingAudioCtrlEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting audio callback event\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMeetingAudioCtrlEvent {
    pub vtable_: *const ZOOMSDK_IMeetingAudioCtrlEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingAudioCtrlEvent"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingAudioCtrlEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingAudioCtrlEvent"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingAudioCtrlEvent>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingAudioController__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting audio controller interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingAudioController {
    pub vtable_: *const ZOOMSDK_IMeetingAudioController__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingAudioController"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingAudioController>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingAudioController"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingAudioController>() - 8usize];
};
pub const ZOOMSDK_RecordingStatus_Recording_Start: ZOOMSDK_RecordingStatus = 0;
#[doc = "Start recording on local computer or on cloud."]
pub const ZOOMSDK_RecordingStatus_Recording_Stop: ZOOMSDK_RecordingStatus = 1;
#[doc = "Stop recording on local computer or on cloud."]
pub const ZOOMSDK_RecordingStatus_Recording_DiskFull: ZOOMSDK_RecordingStatus = 2;
#[doc = "There is no more space to store both local and cloud recording."]
pub const ZOOMSDK_RecordingStatus_Recording_Pause: ZOOMSDK_RecordingStatus = 3;
#[doc = "Pause recording on local or on cloud."]
pub const ZOOMSDK_RecordingStatus_Recording_Connecting: ZOOMSDK_RecordingStatus = 4;
#[doc = "Connecting, only for cloud recording."]
pub const ZOOMSDK_RecordingStatus_Recording_Fail: ZOOMSDK_RecordingStatus = 5;
#[doc = " \\enum RecordingStatus\n\\brief Recording status.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_RecordingStatus = ::std::os::raw::c_uint;
pub const ZOOMSDK_TranscodingStatus_Transcoding_Start: ZOOMSDK_TranscodingStatus = 0;
pub const ZOOMSDK_TranscodingStatus_Transcoding_Inprogress: ZOOMSDK_TranscodingStatus = 1;
pub const ZOOMSDK_TranscodingStatus_Transcoding_End: ZOOMSDK_TranscodingStatus = 2;
pub const ZOOMSDK_TranscodingStatus_Transcoding_Error_LowDiskSpace: ZOOMSDK_TranscodingStatus = 3;
pub const ZOOMSDK_TranscodingStatus_Transcoding_Error_UnknownSources: ZOOMSDK_TranscodingStatus = 4;
pub const ZOOMSDK_TranscodingStatus_Transcoding_Error_WrongFile: ZOOMSDK_TranscodingStatus = 5;
pub const ZOOMSDK_TranscodingStatus_Transcoding_Error_Unknown: ZOOMSDK_TranscodingStatus = 6;
pub type ZOOMSDK_TranscodingStatus = ::std::os::raw::c_uint;
pub const ZOOMSDK_LocalRecordingSubscribeType_REC_TYPE_VIDEO: ZOOMSDK_LocalRecordingSubscribeType =
    0;
pub const ZOOMSDK_LocalRecordingSubscribeType_REC_TYPE_SHARE: ZOOMSDK_LocalRecordingSubscribeType =
    1;
pub type ZOOMSDK_LocalRecordingSubscribeType = ::std::os::raw::c_uint;
pub const ZOOMSDK_LocalRecordingResolution_LocalRecordingResolution_90P:
    ZOOMSDK_LocalRecordingResolution = 0;
pub const ZOOMSDK_LocalRecordingResolution_LocalRecordingResolution_180P:
    ZOOMSDK_LocalRecordingResolution = 1;
pub const ZOOMSDK_LocalRecordingResolution_LocalRecordingResolution_360P:
    ZOOMSDK_LocalRecordingResolution = 2;
pub const ZOOMSDK_LocalRecordingResolution_LocalRecordingResolution_720P:
    ZOOMSDK_LocalRecordingResolution = 3;
pub const ZOOMSDK_LocalRecordingResolution_LocalRecordingResolution_1080P:
    ZOOMSDK_LocalRecordingResolution = 4;
pub const ZOOMSDK_LocalRecordingResolution_LocalRecordingResolution_NoUse:
    ZOOMSDK_LocalRecordingResolution = 100;
pub type ZOOMSDK_LocalRecordingResolution = ::std::os::raw::c_uint;
pub const ZOOMSDK_RequestLocalRecordingStatus_RequestLocalRecording_Granted:
    ZOOMSDK_RequestLocalRecordingStatus = 0;
#[doc = "host grant the request."]
pub const ZOOMSDK_RequestLocalRecordingStatus_RequestLocalRecording_Denied:
    ZOOMSDK_RequestLocalRecordingStatus = 1;
#[doc = "host deny the request."]
pub const ZOOMSDK_RequestLocalRecordingStatus_RequestLocalRecording_Timeout:
    ZOOMSDK_RequestLocalRecordingStatus = 2;
#[doc = " \\enum RequestLocalRecordingStatus\n\\brief Request local recording privilege status.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_RequestLocalRecordingStatus = ::std::os::raw::c_uint;
pub const ZOOMSDK_RequestStartCloudRecordingStatus_RequestStartCloudRecording_Granted:
    ZOOMSDK_RequestStartCloudRecordingStatus = 0;
#[doc = "host grants the request."]
pub const ZOOMSDK_RequestStartCloudRecordingStatus_RequestStartCloudRecording_Denied:
    ZOOMSDK_RequestStartCloudRecordingStatus = 1;
#[doc = "host denies the request."]
pub const ZOOMSDK_RequestStartCloudRecordingStatus_RequestStartCloudRecording_TimedOut:
    ZOOMSDK_RequestStartCloudRecordingStatus = 2;
#[doc = " \\enum RequestStartCloudRecordingStatus\n\\brief Request host to start cloud recording status."]
pub type ZOOMSDK_RequestStartCloudRecordingStatus = ::std::os::raw::c_uint;
pub const ZOOMSDK_LocalRecordingRequestPrivilegeStatus_LocalRecordingRequestPrivilege_None:
    ZOOMSDK_LocalRecordingRequestPrivilegeStatus = 0;
pub const ZOOMSDK_LocalRecordingRequestPrivilegeStatus_LocalRecordingRequestPrivilege_AllowRequest : ZOOMSDK_LocalRecordingRequestPrivilegeStatus = 1 ;
#[doc = "allow participant to send privilege requests."]
pub const ZOOMSDK_LocalRecordingRequestPrivilegeStatus_LocalRecordingRequestPrivilege_AutoGrant:
    ZOOMSDK_LocalRecordingRequestPrivilegeStatus = 2;
#[doc = "host auto-allow all privilege requests."]
pub const ZOOMSDK_LocalRecordingRequestPrivilegeStatus_LocalRecordingRequestPrivilege_AutoDeny:
    ZOOMSDK_LocalRecordingRequestPrivilegeStatus = 3;
pub type ZOOMSDK_LocalRecordingRequestPrivilegeStatus = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IRequestLocalRecordingPrivilegeHandler__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Process after the host receives the requirement from the user to give the local recording privilege."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IRequestLocalRecordingPrivilegeHandler {
    pub vtable_: *const ZOOMSDK_IRequestLocalRecordingPrivilegeHandler__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRequestLocalRecordingPrivilegeHandler"]
        [::std::mem::size_of::<ZOOMSDK_IRequestLocalRecordingPrivilegeHandler>() - 8usize];
    ["Alignment of ZOOMSDK_IRequestLocalRecordingPrivilegeHandler"]
        [::std::mem::align_of::<ZOOMSDK_IRequestLocalRecordingPrivilegeHandler>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IRequestStartCloudRecordingHandler__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Object to handle a user's request to start cloud recording.\n \\remarks If current user can control web setting for smart recording, they will get IRequestEnableAndStartSmartRecordingHandler or ISmartRecordingEnableActionHandler when attendee request to start cloud recording or start cloud recording by self."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IRequestStartCloudRecordingHandler {
    pub vtable_: *const ZOOMSDK_IRequestStartCloudRecordingHandler__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRequestStartCloudRecordingHandler"]
        [::std::mem::size_of::<ZOOMSDK_IRequestStartCloudRecordingHandler>() - 8usize];
    ["Alignment of ZOOMSDK_IRequestStartCloudRecordingHandler"]
        [::std::mem::align_of::<ZOOMSDK_IRequestStartCloudRecordingHandler>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IRequestEnableAndStartSmartRecordingHandler__bindgen_vtable(
    ::std::os::raw::c_void,
);
#[doc = " \\brief Enable and start smart cloud recording request handler"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IRequestEnableAndStartSmartRecordingHandler {
    pub vtable_: *const ZOOMSDK_IRequestEnableAndStartSmartRecordingHandler__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IRequestEnableAndStartSmartRecordingHandler"]
        [::std::mem::size_of::<ZOOMSDK_IRequestEnableAndStartSmartRecordingHandler>() - 8usize];
    ["Alignment of ZOOMSDK_IRequestEnableAndStartSmartRecordingHandler"]
        [::std::mem::align_of::<ZOOMSDK_IRequestEnableAndStartSmartRecordingHandler>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_ISmartRecordingEnableActionHandler__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Enable and start smart recording."]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_ISmartRecordingEnableActionHandler {
    pub vtable_: *const ZOOMSDK_ISmartRecordingEnableActionHandler__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_ISmartRecordingEnableActionHandler"]
        [::std::mem::size_of::<ZOOMSDK_ISmartRecordingEnableActionHandler>() - 8usize];
    ["Alignment of ZOOMSDK_ISmartRecordingEnableActionHandler"]
        [::std::mem::align_of::<ZOOMSDK_ISmartRecordingEnableActionHandler>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingRecordingCtrlEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting recording callback event.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMeetingRecordingCtrlEvent {
    pub vtable_: *const ZOOMSDK_IMeetingRecordingCtrlEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingRecordingCtrlEvent"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingRecordingCtrlEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingRecordingCtrlEvent"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingRecordingCtrlEvent>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingRecordingController__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting recording controller interface.\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingRecordingController {
    pub vtable_: *const ZOOMSDK_IMeetingRecordingController__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingRecordingController"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingRecordingController>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingRecordingController"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingRecordingController>() - 8usize];
};
#[doc = "<For initialization."]
pub const ZOOMSDK_UserRole_USERROLE_NONE: ZOOMSDK_UserRole = 0;
#[doc = "<Role of the host."]
pub const ZOOMSDK_UserRole_USERROLE_HOST: ZOOMSDK_UserRole = 1;
#[doc = "<Role of co-host."]
pub const ZOOMSDK_UserRole_USERROLE_COHOST: ZOOMSDK_UserRole = 2;
#[doc = "<Role of the panelist, valid only in webinar."]
pub const ZOOMSDK_UserRole_USERROLE_PANELIST: ZOOMSDK_UserRole = 3;
#[doc = "<Host role in breakout room."]
pub const ZOOMSDK_UserRole_USERROLE_BREAKOUTROOM_MODERATOR: ZOOMSDK_UserRole = 4;
#[doc = "<Role of attendee."]
pub const ZOOMSDK_UserRole_USERROLE_ATTENDEE: ZOOMSDK_UserRole = 5;
#[doc = " \\enum UserRole\n\\brief Role of user.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_UserRole = ::std::os::raw::c_uint;
#[doc = " \\struct tagWebinarAttendeeStatus\n\\brief Status of webinar attendee.\nHere are more detailed structural descriptions."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_tagWebinarAttendeeStatus {
    #[doc = "<TRUE indicates that it is able to talk."]
    pub allow_talk: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_tagWebinarAttendeeStatus"]
        [::std::mem::size_of::<ZOOMSDK_tagWebinarAttendeeStatus>() - 1usize];
    ["Alignment of ZOOMSDK_tagWebinarAttendeeStatus"]
        [::std::mem::align_of::<ZOOMSDK_tagWebinarAttendeeStatus>() - 1usize];
    ["Offset of field: ZOOMSDK_tagWebinarAttendeeStatus::allow_talk"]
        [::std::mem::offset_of!(ZOOMSDK_tagWebinarAttendeeStatus, allow_talk) - 0usize];
};
#[doc = " \\struct tagWebinarAttendeeStatus\n\\brief Status of webinar attendee.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_WebinarAttendeeStatus = ZOOMSDK_tagWebinarAttendeeStatus;
pub const ZOOMSDK_FocusModeShareType_FocusModeShareType_None: ZOOMSDK_FocusModeShareType = 0;
pub const ZOOMSDK_FocusModeShareType_FocusModeShareType_HostOnly: ZOOMSDK_FocusModeShareType = 1;
pub const ZOOMSDK_FocusModeShareType_FocusModeShareType_AllParticipants:
    ZOOMSDK_FocusModeShareType = 2;
#[doc = " \\enum FocusModeShareType\n\\brief Type of focus mode.\nHere are more detailed structural descriptions."]
pub type ZOOMSDK_FocusModeShareType = ::std::os::raw::c_uint;
#[repr(C)]
pub struct ZOOMSDK_IUserInfo__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief User information interface.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IUserInfo {
    pub vtable_: *const ZOOMSDK_IUserInfo__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IUserInfo"][::std::mem::size_of::<ZOOMSDK_IUserInfo>() - 8usize];
    ["Alignment of ZOOMSDK_IUserInfo"][::std::mem::align_of::<ZOOMSDK_IUserInfo>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingParticipantsCtrlEvent__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting Participants Controller Callback Event.\n"]
#[repr(C)]
#[derive(Debug)]
pub struct ZOOMSDK_IMeetingParticipantsCtrlEvent {
    pub vtable_: *const ZOOMSDK_IMeetingParticipantsCtrlEvent__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingParticipantsCtrlEvent"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingParticipantsCtrlEvent>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingParticipantsCtrlEvent"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingParticipantsCtrlEvent>() - 8usize];
};
#[repr(C)]
pub struct ZOOMSDK_IMeetingParticipantsController__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief Meeting waiting room controller interface\n"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_IMeetingParticipantsController {
    pub vtable_: *const ZOOMSDK_IMeetingParticipantsController__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ZOOMSDK_IMeetingParticipantsController"]
        [::std::mem::size_of::<ZOOMSDK_IMeetingParticipantsController>() - 8usize];
    ["Alignment of ZOOMSDK_IMeetingParticipantsController"]
        [::std::mem::align_of::<ZOOMSDK_IMeetingParticipantsController>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_ICalenderService {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ZOOMSDK_INetworkConnectionHelper {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " \\brief Initialize ZOOM SDK.\n \\param [out] initParam Initialize the parameter of ZOOM SDK. For more details, see \\link InitParam \\endlink structure.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}InitSDK"]
    pub fn ZOOMSDK_InitSDK(initParam: *mut ZOOMSDK_InitParam) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[link_name = "\u{1}SwitchDomain"]
    pub fn ZOOMSDK_SwitchDomain(new_domain: *const zchar_t, bForce: bool) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Create meeting service interface.\n \\param ppMeetingService An object pointer to the IMeetingService*.\n \\return If the function succeeds, the return value is SDKErr_Success while the value of ppMeetingService is not NULL.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}CreateMeetingService"]
    pub fn ZOOMSDK_CreateMeetingService(
        ppMeetingService: *mut *mut ZOOMSDK_IMeetingService,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Destroy the specified meeting service Interface.\n \\param pMeetingService A pointer to the IMeetingService to be destroyed.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}DestroyMeetingService"]
    pub fn ZOOMSDK_DestroyMeetingService(
        pMeetingService: *mut ZOOMSDK_IMeetingService,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Create authentication service interface.\n \\param ppAuthService An object pointer to the IAuthService*.\n \\return If the function succeeds, the return value is SDKErr_Success while the value of ppAuthService is not NULL.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}CreateAuthService"]
    pub fn ZOOMSDK_CreateAuthService(
        ppAuthService: *mut *mut ZOOMSDK_IAuthService,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Destroy the specified authentication service interface.\n \\param pAuthService A pointer to the IAuthService to be destroyed.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}DestroyAuthService"]
    pub fn ZOOMSDK_DestroyAuthService(pAuthService: *mut ZOOMSDK_IAuthService) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Create setting service interface.\n \\param ppSettingService An object pointer to the ISettingService*.\n \\return If the function succeeds, the return value is SDKErr_Success while the value of ppSettingService is not NULL.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}CreateSettingService"]
    pub fn ZOOMSDK_CreateSettingService(
        ppSettingService: *mut *mut ZOOMSDK_ISettingService,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Destroy the specified setting service interface.\n \\param pSettingService A pointer to the ISettingService to be destroyed.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}DestroySettingService"]
    pub fn ZOOMSDK_DestroySettingService(
        pSettingService: *mut ZOOMSDK_ISettingService,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Create network connection helper interface.\n \\param ppNetworkHelper An object pointer to the INetworkConnectionHelper*.\n \\return If the function succeeds, the return value is SDKErr_Success while the value of ppNetworkHelper is not NULL.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}CreateNetworkConnectionHelper"]
    pub fn ZOOMSDK_CreateNetworkConnectionHelper(
        ppNetworkHelper: *mut *mut ZOOMSDK_INetworkConnectionHelper,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Destroy the specified network connection helper interface.\n \\param pNetworkHelper A pointer to the INetworkConnectionHelper to be destroyed.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}DestroyNetworkConnectionHelper"]
    pub fn ZOOMSDK_DestroyNetworkConnectionHelper(
        pNetworkHelper: *mut ZOOMSDK_INetworkConnectionHelper,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Clean up ZOOM SDK.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    #[link_name = "\u{1}CleanUPSDK"]
    pub fn ZOOMSDK_CleanUPSDK() -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Get the version of ZOOM SDK.\n \\return The version of ZOOM SDK."]
    #[link_name = "\u{1}GetSDKVersion"]
    pub fn ZOOMSDK_GetSDKVersion() -> *const zchar_t;
}
extern "C" {
    #[doc = " \\brief Get ZOOM last error interface.\n \\return If the function succeeds, the return value is an interface of ZOOM last error.\nIf the function fails or there is no error, the return value is NULL.\n For more information, see \\link IZoomLastError  \\endlink"]
    #[link_name = "\u{1}GetZoomLastError"]
    pub fn ZOOMSDK_GetZoomLastError() -> *const ZOOMSDK_IZoomLastError;
}
extern "C" {
    #[doc = " \\brief Set the authentication service callback event handler.\n \\param pEvent A pointer to receive authentication event.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn auth_set_event(
        auth_service: *mut ZOOMSDK_IAuthService,
        arc_ptr: *mut ::std::os::raw::c_void,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief SDK Authentication with jwt token.\n \\param authContext The parameter to be used for authentication SDK, see \\link AuthContext \\endlink structure.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn auth_sdk_auth(
        auth_service: *mut ZOOMSDK_IAuthService,
        jwt_token: *const zchar_t,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Get authentication status.\n \\return The return value is authentication status. To get extended error information, see \\link AuthResult \\endlink enum."]
    pub fn auth_get_auth_result(auth_service: *mut ZOOMSDK_IAuthService) -> ZOOMSDK_AuthResult;
}
extern "C" {
    #[doc = " \\brief Get SDK identity.\n \\return The SDK identity."]
    pub fn auth_get_sdk_identity(auth_service: *mut ZOOMSDK_IAuthService) -> *const zchar_t;
}
extern "C" {
    #[doc = " \\brief Get SSO login web url.\n \\param prefix_of_vanity_url, prefix of vanity url.\n \\return SSO login web url"]
    pub fn auth_generate_sso_login_web_url(
        auth_service: *mut ZOOMSDK_IAuthService,
        prefix_of_vanity_url: *const zchar_t,
    ) -> *const zchar_t;
}
extern "C" {
    #[doc = " \\brief Account login.\n \\param uri_protocol For the parameter to be used for sso account login\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum.\nYou need to call this APIs after IAuthServiceEvent::onAuthenticationReturn() return SDKErr_Success."]
    pub fn auth_sso_login_with_web_uri_protocol(
        auth_service: *mut ZOOMSDK_IAuthService,
        uri_protocol: *const zchar_t,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Account logout.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn auth_log_out(auth_service: *mut ZOOMSDK_IAuthService) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Get login account information.\n \\return If you has logged in your account successfully, the return value is a pointer to IAccountInfo, otherwise is NULL."]
    pub fn auth_get_account_info(
        auth_service: *mut ZOOMSDK_IAuthService,
    ) -> *mut ZOOMSDK_IAccountInfo;
}
extern "C" {
    #[doc = " \\brief Get login status.\n \\return The return value is login status. To get extended error information, see \\link LOGINSTATUS \\endlink enum."]
    pub fn auth_get_login_status(auth_service: *mut ZOOMSDK_IAuthService) -> ZOOMSDK_LOGINSTATUS;
}
extern "C" {
    pub fn auth_get_acount_info_display_name(
        account_info: *mut ZOOMSDK_IAccountInfo,
    ) -> *const zchar_t;
}
extern "C" {
    pub fn auth_get_account_info_login_type(
        account_info: *mut ZOOMSDK_IAccountInfo,
    ) -> ZOOMSDK_LoginType;
}
extern "C" {
    #[doc = " \\brief Set meeting service callback event handler.\n \\param pEvent A pointer to the IMeetingServiceEvent that receives the meeting service callback event.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn meeting_set_event(
        meeting_service: *mut ZOOMSDK_IMeetingService,
        arc_ptr: *mut ::std::os::raw::c_void,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Join the meeting.\n \\param joinParam The parameter is used to join meeting. For more details, see \\link JoinParam \\endlink structure.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn meeting_join(
        meeting_service: *mut ZOOMSDK_IMeetingService,
        mid: ::std::os::raw::c_ulong,
        userName: *mut zchar_t,
        psw: *mut zchar_t,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Leave meeting.\n \\param leaveCmd Leave meeting command. For more details, see \\link LeaveMeetingCmd \\endlink enum.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn meeting_leave(
        meeting_service: *mut ZOOMSDK_IMeetingService,
        leaveCmd: ZOOMSDK_LeaveMeetingCmd,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Get the chat controller interface.\n \\return If the function succeeds, the return value is a pointer to IMeetingChatController. Otherwise returns NULL."]
    pub fn meeting_get_meeting_chat_controller(
        meeting_service: *mut ZOOMSDK_IMeetingService,
    ) -> *mut ZOOMSDK_IMeetingChatController;
}
extern "C" {
    #[doc = " \\brief Get the participants controller interface.\n \\return If the function succeeds, the return value is a pointer to IMeetingParticipantsController. Otherwise returns NULL."]
    pub fn meeting_get_meeting_participants_controller(
        meeting_service: *mut ZOOMSDK_IMeetingService,
    ) -> *mut ZOOMSDK_IMeetingParticipantsController;
}
extern "C" {
    #[doc = " \\brief Get the recording controller interface.\n \\return If the function succeeds, the return value is a pointer to IMeetingRecordingController. Otherwise returns NULL."]
    pub fn meeting_get_meeting_recording_controller(
        meeting_service: *mut ZOOMSDK_IMeetingService,
    ) -> *mut ZOOMSDK_IMeetingRecordingController;
}
extern "C" {
    #[doc = " \\brief Get audio setting interface.\n \\return If the function succeeds, the return value an object pointer to IAudioSettingContext.\n Otherwise failed, returns NULL.\n For more details, see \\link IAudioSettingContext \\endlink."]
    pub fn get_audio_settings(
        setting_service: *mut ZOOMSDK_ISettingService,
    ) -> *mut ZOOMSDK_IAudioSettingContext;
}
extern "C" {
    #[doc = " \\brief Enable or disable the audio automatically when join meeting.\n \\param bEnable TRUE indicates to enable the audio automatically when join meeting.\n \\return If the function succeeds, the return value is SDKErr_Success.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn enable_auto_join_audio(
        audio_setting: *mut ZOOMSDK_IAudioSettingContext,
        value: bool,
    ) -> ZOOMSDK_SDKError;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mic_list {
    pub device_id: *const zchar_t,
    pub device_name: *const zchar_t,
    pub selected: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of mic_list"][::std::mem::size_of::<mic_list>() - 24usize];
    ["Alignment of mic_list"][::std::mem::align_of::<mic_list>() - 8usize];
    ["Offset of field: mic_list::device_id"][::std::mem::offset_of!(mic_list, device_id) - 0usize];
    ["Offset of field: mic_list::device_name"]
        [::std::mem::offset_of!(mic_list, device_name) - 8usize];
    ["Offset of field: mic_list::selected"][::std::mem::offset_of!(mic_list, selected) - 16usize];
};
extern "C" {
    #[doc = " \\brief Get the mic device list.\n \\return If the function succeeds, the return value is the camera device list.\n Otherwise failed, returns NULL."]
    pub fn get_mic_list(
        audio_setting: *mut ZOOMSDK_IAudioSettingContext,
        len: *mut ::std::os::raw::c_uint,
    ) -> *mut mic_list;
}
extern "C" {
    #[doc = " \\brief Select mic device.\n \\param deviceId Specify the device to be selected.\n \\param deviceName Specify the device name assigned by deviceId.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn select_mic(
        audio_setting: *mut ZOOMSDK_IAudioSettingContext,
        deviceId: *const zchar_t,
        deviceName: *const zchar_t,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Set the suppress background noise level.\n \\param level The new suppress background noise level to be set.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn set_suppress_background_noise_level(
        audio_setting: *mut ZOOMSDK_IAudioSettingContext,
        level: ZOOMSDK_Suppress_Background_Noise_Level,
    ) -> ZOOMSDK_SDKError;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timex {
    pub modes: ::std::os::raw::c_uint,
    pub offset: __syscall_slong_t,
    pub freq: __syscall_slong_t,
    pub maxerror: __syscall_slong_t,
    pub esterror: __syscall_slong_t,
    pub status: ::std::os::raw::c_int,
    pub constant: __syscall_slong_t,
    pub precision: __syscall_slong_t,
    pub tolerance: __syscall_slong_t,
    pub time: timeval,
    pub tick: __syscall_slong_t,
    pub ppsfreq: __syscall_slong_t,
    pub jitter: __syscall_slong_t,
    pub shift: ::std::os::raw::c_int,
    pub stabil: __syscall_slong_t,
    pub jitcnt: __syscall_slong_t,
    pub calcnt: __syscall_slong_t,
    pub errcnt: __syscall_slong_t,
    pub stbcnt: __syscall_slong_t,
    pub tai: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timex"][::std::mem::size_of::<timex>() - 208usize];
    ["Alignment of timex"][::std::mem::align_of::<timex>() - 8usize];
    ["Offset of field: timex::modes"][::std::mem::offset_of!(timex, modes) - 0usize];
    ["Offset of field: timex::offset"][::std::mem::offset_of!(timex, offset) - 8usize];
    ["Offset of field: timex::freq"][::std::mem::offset_of!(timex, freq) - 16usize];
    ["Offset of field: timex::maxerror"][::std::mem::offset_of!(timex, maxerror) - 24usize];
    ["Offset of field: timex::esterror"][::std::mem::offset_of!(timex, esterror) - 32usize];
    ["Offset of field: timex::status"][::std::mem::offset_of!(timex, status) - 40usize];
    ["Offset of field: timex::constant"][::std::mem::offset_of!(timex, constant) - 48usize];
    ["Offset of field: timex::precision"][::std::mem::offset_of!(timex, precision) - 56usize];
    ["Offset of field: timex::tolerance"][::std::mem::offset_of!(timex, tolerance) - 64usize];
    ["Offset of field: timex::time"][::std::mem::offset_of!(timex, time) - 72usize];
    ["Offset of field: timex::tick"][::std::mem::offset_of!(timex, tick) - 88usize];
    ["Offset of field: timex::ppsfreq"][::std::mem::offset_of!(timex, ppsfreq) - 96usize];
    ["Offset of field: timex::jitter"][::std::mem::offset_of!(timex, jitter) - 104usize];
    ["Offset of field: timex::shift"][::std::mem::offset_of!(timex, shift) - 112usize];
    ["Offset of field: timex::stabil"][::std::mem::offset_of!(timex, stabil) - 120usize];
    ["Offset of field: timex::jitcnt"][::std::mem::offset_of!(timex, jitcnt) - 128usize];
    ["Offset of field: timex::calcnt"][::std::mem::offset_of!(timex, calcnt) - 136usize];
    ["Offset of field: timex::errcnt"][::std::mem::offset_of!(timex, errcnt) - 144usize];
    ["Offset of field: timex::stbcnt"][::std::mem::offset_of!(timex, stbcnt) - 152usize];
    ["Offset of field: timex::tai"][::std::mem::offset_of!(timex, tai) - 160usize];
};
extern "C" {
    pub fn clock_adjtime(__clock_id: __clockid_t, __utx: *mut timex) -> ::std::os::raw::c_int;
}
pub type clock_t = __clock_t;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of itimerspec"][::std::mem::size_of::<itimerspec>() - 32usize];
    ["Alignment of itimerspec"][::std::mem::align_of::<itimerspec>() - 8usize];
    ["Offset of field: itimerspec::it_interval"]
        [::std::mem::offset_of!(itimerspec, it_interval) - 0usize];
    ["Offset of field: itimerspec::it_value"]
        [::std::mem::offset_of!(itimerspec, it_value) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        __s: *const ::std::os::raw::c_char,
        __fmt: *const ::std::os::raw::c_char,
        __tp: *mut tm,
        __loc: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_getres(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdate(__string: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn getdate_r(
        __string: *const ::std::os::raw::c_char,
        __resbufp: *mut tm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn meeting_get_chat_message_builder(
        chat_controler: *mut ZOOMSDK_IMeetingChatController,
    ) -> *mut ZOOMSDK_IChatMsgInfoBuilder;
}
extern "C" {
    pub fn meeting_send_chat_message_to(
        chat_controler: *mut ZOOMSDK_IMeetingChatController,
        msg: *mut ZOOMSDK_IChatMsgInfo,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    pub fn meeting_chat_build(
        builder: *mut ZOOMSDK_IChatMsgInfoBuilder,
        content: *mut zchar_t,
        msg_type: ZOOMSDK_SDKChatMessageType,
    ) -> *mut ZOOMSDK_IChatMsgInfo;
}
extern "C" {
    pub fn init_video_to_virtual_webcam(
        meeting_service: *mut ZOOMSDK_IMeetingService,
        ptr_to_rust: *mut ::std::os::raw::c_void,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    pub fn play_video_to_virtual_webcam(
        video_sender: *mut ZOOMSDK_IZoomSDKVideoSender,
        video_source_ptr: *const ::std::os::raw::c_char,
    ) -> ZOOMSDK_SDKError;
}
#[repr(C)]
pub struct AudioRawData__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief The audio raw data handler interface."]
#[repr(C)]
#[derive(Debug)]
pub struct AudioRawData {
    pub vtable_: *const AudioRawData__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AudioRawData"][::std::mem::size_of::<AudioRawData>() - 8usize];
    ["Alignment of AudioRawData"][::std::mem::align_of::<AudioRawData>() - 8usize];
};
#[repr(C)]
pub struct YUVRawDataI420__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief The YUV raw data handler interface."]
#[repr(C)]
#[derive(Debug)]
pub struct YUVRawDataI420 {
    pub vtable_: *const YUVRawDataI420__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of YUVRawDataI420"][::std::mem::size_of::<YUVRawDataI420>() - 8usize];
    ["Alignment of YUVRawDataI420"][::std::mem::align_of::<YUVRawDataI420>() - 8usize];
};
#[repr(C)]
pub struct YUVProcessDataI420__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct YUVProcessDataI420 {
    pub vtable_: *const YUVProcessDataI420__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of YUVProcessDataI420"][::std::mem::size_of::<YUVProcessDataI420>() - 8usize];
    ["Alignment of YUVProcessDataI420"][::std::mem::align_of::<YUVProcessDataI420>() - 8usize];
};
#[repr(C)]
pub struct IYUVRawDataI420Converter__bindgen_vtable(::std::os::raw::c_void);
#[doc = " \\brief I420 YUV raw data converter interface."]
#[repr(C)]
#[derive(Debug)]
pub struct IYUVRawDataI420Converter {
    pub vtable_: *const IYUVRawDataI420Converter__bindgen_vtable,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IYUVRawDataI420Converter"]
        [::std::mem::size_of::<IYUVRawDataI420Converter>() - 8usize];
    ["Alignment of IYUVRawDataI420Converter"]
        [::std::mem::align_of::<IYUVRawDataI420Converter>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exported_audio_raw_data {
    pub data: *mut ::std::os::raw::c_char,
    pub time: i64,
    pub len: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of exported_audio_raw_data"][::std::mem::size_of::<exported_audio_raw_data>() - 24usize];
    ["Alignment of exported_audio_raw_data"]
        [::std::mem::align_of::<exported_audio_raw_data>() - 8usize];
    ["Offset of field: exported_audio_raw_data::data"]
        [::std::mem::offset_of!(exported_audio_raw_data, data) - 0usize];
    ["Offset of field: exported_audio_raw_data::time"]
        [::std::mem::offset_of!(exported_audio_raw_data, time) - 8usize];
    ["Offset of field: exported_audio_raw_data::len"]
        [::std::mem::offset_of!(exported_audio_raw_data, len) - 16usize];
};
extern "C" {
    pub fn audio_helper_create_delegate(
        arc_ptr: *mut ::std::os::raw::c_void,
        use_separate_channels: bool,
    ) -> *mut ZOOMSDK_IZoomSDKAudioRawDataDelegate;
}
extern "C" {
    #[doc = " \\brief Subscribe raw audio data.\n \\param pDelegate, the callback handler of raw audio data.\n \\param bWithInterpreters, if bWithInterpreters is true, it means that you want to get the raw audio data of interpreters, otherwise not.\n        NOTE: if bWithInterpreters is true, it will cause your local interpreter related functions to be unavailable.\n \\return If the function succeeds, the return value is SDKERR_SUCCESS.\nOtherwise fails. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn audio_helper_subscribe_delegate(
        ctx: *mut ZOOMSDK_IZoomSDKAudioRawDataHelper,
        pDelegate: *mut ZOOMSDK_IZoomSDKAudioRawDataDelegate,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    pub fn audio_helper_unsubscribe_delegate(
        ctx: *mut ZOOMSDK_IZoomSDKAudioRawDataHelper,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Subscribe audio mic raw data with a callback.\n \\param pSource, Callback sink object.\n \\return If the function succeeds, the return value is SDKERR_SUCCESS.\nOtherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn audio_helper_set_external_audio_source(
        ctx: *mut ZOOMSDK_IZoomSDKAudioRawDataHelper,
        arc_ptr: *mut ::std::os::raw::c_void,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Send audio raw data. Audio sample must be 16-bit audio.\n \\param data the audio datas address.\n \\param data_length the audio datas length. Must be an even number.\n \\param sample_rate the audio datas sampling rate.\n When the channel is mono, supported sample rates: 8000/11025/16000/32000/44100/48000/50000/50400/96000/192000/2822400\n \\return If the function succeeds, the return value is SDKERR_SUCCESS."]
    pub fn send_audio_raw_data(
        p_sender: *mut ZOOMSDK_IZoomSDKAudioRawDataSender,
        data: *mut ::std::os::raw::c_char,
        data_length: ::std::os::raw::c_uint,
        sample_rate: ::std::os::raw::c_int,
    ) -> ZOOMSDK_SDKError;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exported_video_raw_data {
    pub data: *mut ::std::os::raw::c_char,
    pub time: i64,
    pub len: u32,
    pub user_id: u32,
    pub width: u32,
    pub height: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of exported_video_raw_data"][::std::mem::size_of::<exported_video_raw_data>() - 32usize];
    ["Alignment of exported_video_raw_data"]
        [::std::mem::align_of::<exported_video_raw_data>() - 8usize];
    ["Offset of field: exported_video_raw_data::data"]
        [::std::mem::offset_of!(exported_video_raw_data, data) - 0usize];
    ["Offset of field: exported_video_raw_data::time"]
        [::std::mem::offset_of!(exported_video_raw_data, time) - 8usize];
    ["Offset of field: exported_video_raw_data::len"]
        [::std::mem::offset_of!(exported_video_raw_data, len) - 16usize];
    ["Offset of field: exported_video_raw_data::user_id"]
        [::std::mem::offset_of!(exported_video_raw_data, user_id) - 20usize];
    ["Offset of field: exported_video_raw_data::width"]
        [::std::mem::offset_of!(exported_video_raw_data, width) - 24usize];
    ["Offset of field: exported_video_raw_data::height"]
        [::std::mem::offset_of!(exported_video_raw_data, height) - 28usize];
};
extern "C" {
    pub fn video_helper_create_delegate(
        arc_ptr: *mut ::std::os::raw::c_void,
    ) -> *mut ZOOMSDK_IZoomSDKRendererDelegate;
}
extern "C" {
    pub fn video_helper_subscribe_delegate(
        ctx: *mut ZOOMSDK_IZoomSDKRenderer,
        user_id: u32,
        data_type: ZOOMSDK_ZoomSDKRawDataType,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    pub fn video_helper_unsubscribe_delegate(
        ctx: *mut ZOOMSDK_IZoomSDKRenderer,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    pub fn set_raw_data_resolution(
        ctx: *mut ZOOMSDK_IZoomSDKRenderer,
        resolution: ZOOMSDK_ZoomSDKResolution,
    ) -> ZOOMSDK_SDKError;
}
#[doc = " @brief This structure represents an user with ID and virtual interface."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct participant {
    pub user_info: *mut ZOOMSDK_IUserInfo,
    pub user_id: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of participant"][::std::mem::size_of::<participant>() - 16usize];
    ["Alignment of participant"][::std::mem::align_of::<participant>() - 8usize];
    ["Offset of field: participant::user_info"]
        [::std::mem::offset_of!(participant, user_info) - 0usize];
    ["Offset of field: participant::user_id"]
        [::std::mem::offset_of!(participant, user_id) - 8usize];
};
extern "C" {
    #[doc = " @brief Get Particpants list\n @param controller A Pointer to ZOOMSDK::IMeetingParticipantsController\n @param len A Pointer to then length of the returned array\n @return struct participant* An Array of UserInfo"]
    pub fn meeting_participants_get_users(
        controller: *mut ZOOMSDK_IMeetingParticipantsController,
        len: *mut ::std::os::raw::c_uint,
    ) -> *mut participant;
}
extern "C" {
    #[doc = " @brief Free Participants list\n @param m A Pointer to the struct participant array\n @return void"]
    pub fn meeting_participants_free_memory(m: *mut participant);
}
extern "C" {
    #[doc = " @brief Check if a participant is talking\n @param user_info A Pointer to ZOOMSDK::IUserInfo\n @return Boolean, true is the user is talking"]
    pub fn meeting_participants_is_talking(user_info: *mut ZOOMSDK_IUserInfo) -> bool;
}
extern "C" {
    #[doc = " @brief Get the username matched with the current user information.\n @param user_info A Pointer to ZOOMSDK::IUserInfo\n @return If the function succeeds, the return value is the username.\n Otherwise failed, the return value is NULL.\n @remarks Valid for both normal user and webinar attendee."]
    pub fn meeting_participants_get_user_name(user_info: *mut ZOOMSDK_IUserInfo) -> *const zchar_t;
}
extern "C" {
    #[doc = " @brief Get the Mic level of the user corresponding to the current information.\n @return The mic level of the user."]
    pub fn meeting_participants_get_audio_voice_level(
        user_info: *mut ZOOMSDK_IUserInfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " \\brief Get the user ID matched with the current user information.\n \\return If the function succeeds, the return value is the user ID.\n Otherwise the function fails, and the return value is ZERO(0).\n \\remarks Valid for both normal user and webinar attendee."]
    pub fn get_user_id(user_info: *mut ZOOMSDK_IUserInfo) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[doc = " \\brief Get the information of current user.\n \\return If the function succeeds, the return value is a pointer to the IUserInfo. For more details, see \\link IUserInfo \\endlink.\n Otherwise failed, the return value is NULL.\n \\remarks Valid for both ZOOM style and user custom interface mode.."]
    pub fn get_my_self_user(
        controller: *mut ZOOMSDK_IMeetingParticipantsController,
    ) -> *mut ZOOMSDK_IUserInfo;
}
extern "C" {
    #[doc = " \\brief Send a request to enable the SDK to start local recording.\n \\return If the function succeeds, the return value is SDKErr_Success and the SDK will send the request.\n Otherwise it fails and the request will not be sent. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_request_local_recording_privilege(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Send a request to ask the host to start cloud recording.\n \\return If the function succeeds, the return value is SDKErr_Success and the SDK sends the request.\n Otherwise it fails and the request is not sent. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_request_start_cloud_recording(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Start recording.\n \\param [out] startTimestamp The timestamps when start recording.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_start_recording(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
        startTimestamp: *mut time_t,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Stop recording.\n \\param [out] stopTimestamp The timestamps when stop recording.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_stop_recording(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
        stopTimestamp: *mut time_t,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Pause recording.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_pause_recording(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Resume recording.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_resume_recording(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Set meeting recording callback event handler.\n \\param pEvent A pointer to the IMeetingRecordingCtrlEvent that receives the recording event.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_set_event(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
        arc_ptr: *mut ::std::os::raw::c_void,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Determine if the specified user is enabled to start raw recording.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_can_start_raw_recording(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
    ) -> bool;
}
extern "C" {
    #[doc = " \\brief Start rawdata recording.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_start_raw_recording(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
    ) -> ZOOMSDK_SDKError;
}
extern "C" {
    #[doc = " \\brief Stop rawdata recording.\n \\return If the function succeeds, the return value is SDKErr_Success.\n Otherwise failed. To get extended error information, see \\link SDKError \\endlink enum."]
    pub fn recording_stop_raw_recording(
        ctrl: *mut ZOOMSDK_IMeetingRecordingController,
    ) -> ZOOMSDK_SDKError;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
